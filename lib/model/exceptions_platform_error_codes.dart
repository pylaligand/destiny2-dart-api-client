part of destiny2_api.api;

@Entity()
class ExceptionsPlatformErrorCodes {
  /// The underlying value of this enum member.
  final int value;

  const ExceptionsPlatformErrorCodes._internal(this.value);

  static const ExceptionsPlatformErrorCodes none = const ExceptionsPlatformErrorCodes._internal(0);
  static const ExceptionsPlatformErrorCodes success = const ExceptionsPlatformErrorCodes._internal(1);
  static const ExceptionsPlatformErrorCodes transportException = const ExceptionsPlatformErrorCodes._internal(2);
  static const ExceptionsPlatformErrorCodes unhandledException = const ExceptionsPlatformErrorCodes._internal(3);
  static const ExceptionsPlatformErrorCodes notImplemented = const ExceptionsPlatformErrorCodes._internal(4);
  static const ExceptionsPlatformErrorCodes systemDisabled = const ExceptionsPlatformErrorCodes._internal(5);
  static const ExceptionsPlatformErrorCodes failedToLoadAvailableLocalesConfiguration = const ExceptionsPlatformErrorCodes._internal(6);
  static const ExceptionsPlatformErrorCodes parameterParseFailure = const ExceptionsPlatformErrorCodes._internal(7);
  static const ExceptionsPlatformErrorCodes parameterInvalidRange = const ExceptionsPlatformErrorCodes._internal(8);
  static const ExceptionsPlatformErrorCodes badRequest = const ExceptionsPlatformErrorCodes._internal(9);
  static const ExceptionsPlatformErrorCodes authenticationInvalid = const ExceptionsPlatformErrorCodes._internal(10);
  static const ExceptionsPlatformErrorCodes dataNotFound = const ExceptionsPlatformErrorCodes._internal(11);
  static const ExceptionsPlatformErrorCodes insufficientPrivileges = const ExceptionsPlatformErrorCodes._internal(12);
  static const ExceptionsPlatformErrorCodes duplicate = const ExceptionsPlatformErrorCodes._internal(13);
  /// Deprecated, please do not check for this value anywhere.
  static const ExceptionsPlatformErrorCodes unknownSqlResult = const ExceptionsPlatformErrorCodes._internal(14);
  static const ExceptionsPlatformErrorCodes validationError = const ExceptionsPlatformErrorCodes._internal(15);
  static const ExceptionsPlatformErrorCodes validationMissingFieldError = const ExceptionsPlatformErrorCodes._internal(16);
  static const ExceptionsPlatformErrorCodes validationInvalidInputError = const ExceptionsPlatformErrorCodes._internal(17);
  static const ExceptionsPlatformErrorCodes invalidParameters = const ExceptionsPlatformErrorCodes._internal(18);
  static const ExceptionsPlatformErrorCodes parameterNotFound = const ExceptionsPlatformErrorCodes._internal(19);
  static const ExceptionsPlatformErrorCodes unhandledHttpException = const ExceptionsPlatformErrorCodes._internal(20);
  static const ExceptionsPlatformErrorCodes notFound = const ExceptionsPlatformErrorCodes._internal(21);
  static const ExceptionsPlatformErrorCodes webAuthModuleAsyncFailed = const ExceptionsPlatformErrorCodes._internal(22);
  static const ExceptionsPlatformErrorCodes invalidReturnValue = const ExceptionsPlatformErrorCodes._internal(23);
  static const ExceptionsPlatformErrorCodes userBanned = const ExceptionsPlatformErrorCodes._internal(24);
  static const ExceptionsPlatformErrorCodes invalidPostBody = const ExceptionsPlatformErrorCodes._internal(25);
  static const ExceptionsPlatformErrorCodes missingPostBody = const ExceptionsPlatformErrorCodes._internal(26);
  static const ExceptionsPlatformErrorCodes externalServiceTimeout = const ExceptionsPlatformErrorCodes._internal(27);
  static const ExceptionsPlatformErrorCodes validationLengthError = const ExceptionsPlatformErrorCodes._internal(28);
  static const ExceptionsPlatformErrorCodes validationRangeError = const ExceptionsPlatformErrorCodes._internal(29);
  static const ExceptionsPlatformErrorCodes jsonDeserializationError = const ExceptionsPlatformErrorCodes._internal(30);
  static const ExceptionsPlatformErrorCodes throttleLimitExceeded = const ExceptionsPlatformErrorCodes._internal(31);
  static const ExceptionsPlatformErrorCodes validationTagError = const ExceptionsPlatformErrorCodes._internal(32);
  static const ExceptionsPlatformErrorCodes validationProfanityError = const ExceptionsPlatformErrorCodes._internal(33);
  static const ExceptionsPlatformErrorCodes validationUrlFormatError = const ExceptionsPlatformErrorCodes._internal(34);
  static const ExceptionsPlatformErrorCodes throttleLimitExceededMinutes = const ExceptionsPlatformErrorCodes._internal(35);
  static const ExceptionsPlatformErrorCodes throttleLimitExceededMomentarily = const ExceptionsPlatformErrorCodes._internal(36);
  static const ExceptionsPlatformErrorCodes throttleLimitExceededSeconds = const ExceptionsPlatformErrorCodes._internal(37);
  static const ExceptionsPlatformErrorCodes externalServiceUnknown = const ExceptionsPlatformErrorCodes._internal(38);
  static const ExceptionsPlatformErrorCodes validationWordLengthError = const ExceptionsPlatformErrorCodes._internal(39);
  static const ExceptionsPlatformErrorCodes validationInvisibleUnicode = const ExceptionsPlatformErrorCodes._internal(40);
  static const ExceptionsPlatformErrorCodes validationBadNames = const ExceptionsPlatformErrorCodes._internal(41);
  static const ExceptionsPlatformErrorCodes externalServiceFailed = const ExceptionsPlatformErrorCodes._internal(42);
  static const ExceptionsPlatformErrorCodes serviceRetired = const ExceptionsPlatformErrorCodes._internal(43);
  static const ExceptionsPlatformErrorCodes unknownSqlException = const ExceptionsPlatformErrorCodes._internal(44);
  static const ExceptionsPlatformErrorCodes unsupportedLocale = const ExceptionsPlatformErrorCodes._internal(45);
  static const ExceptionsPlatformErrorCodes invalidPageNumber = const ExceptionsPlatformErrorCodes._internal(46);
  static const ExceptionsPlatformErrorCodes maximumPageSizeExceeded = const ExceptionsPlatformErrorCodes._internal(47);
  static const ExceptionsPlatformErrorCodes serviceUnsupported = const ExceptionsPlatformErrorCodes._internal(48);
  static const ExceptionsPlatformErrorCodes validationMaximumUnicodeCombiningCharacters = const ExceptionsPlatformErrorCodes._internal(49);
  static const ExceptionsPlatformErrorCodes validationMaximumSequentialCarriageReturns = const ExceptionsPlatformErrorCodes._internal(50);
  static const ExceptionsPlatformErrorCodes perEndpointRequestThrottleExceeded = const ExceptionsPlatformErrorCodes._internal(51);
  static const ExceptionsPlatformErrorCodes authContextCacheAssertion = const ExceptionsPlatformErrorCodes._internal(52);
  static const ExceptionsPlatformErrorCodes exPlatformStringValidationError = const ExceptionsPlatformErrorCodes._internal(53);
  static const ExceptionsPlatformErrorCodes obsoleteCredentialType = const ExceptionsPlatformErrorCodes._internal(89);
  static const ExceptionsPlatformErrorCodes unableToUnPairMobileApp = const ExceptionsPlatformErrorCodes._internal(90);
  static const ExceptionsPlatformErrorCodes unableToPairMobileApp = const ExceptionsPlatformErrorCodes._internal(91);
  static const ExceptionsPlatformErrorCodes cannotUseMobileAuthWithNonMobileProvider = const ExceptionsPlatformErrorCodes._internal(92);
  static const ExceptionsPlatformErrorCodes missingDeviceCookie = const ExceptionsPlatformErrorCodes._internal(93);
  static const ExceptionsPlatformErrorCodes facebookTokenExpired = const ExceptionsPlatformErrorCodes._internal(94);
  static const ExceptionsPlatformErrorCodes authTicketRequired = const ExceptionsPlatformErrorCodes._internal(95);
  static const ExceptionsPlatformErrorCodes cookieContextRequired = const ExceptionsPlatformErrorCodes._internal(96);
  static const ExceptionsPlatformErrorCodes unknownAuthenticationError = const ExceptionsPlatformErrorCodes._internal(97);
  static const ExceptionsPlatformErrorCodes bungieNetAccountCreationRequired = const ExceptionsPlatformErrorCodes._internal(98);
  static const ExceptionsPlatformErrorCodes webAuthRequired = const ExceptionsPlatformErrorCodes._internal(99);
  static const ExceptionsPlatformErrorCodes contentUnknownSqlResult = const ExceptionsPlatformErrorCodes._internal(100);
  static const ExceptionsPlatformErrorCodes contentNeedUniquePath = const ExceptionsPlatformErrorCodes._internal(101);
  static const ExceptionsPlatformErrorCodes contentSqlException = const ExceptionsPlatformErrorCodes._internal(102);
  static const ExceptionsPlatformErrorCodes contentNotFound = const ExceptionsPlatformErrorCodes._internal(103);
  static const ExceptionsPlatformErrorCodes contentSuccessWithTagAddFail = const ExceptionsPlatformErrorCodes._internal(104);
  static const ExceptionsPlatformErrorCodes contentSearchMissingParameters = const ExceptionsPlatformErrorCodes._internal(105);
  static const ExceptionsPlatformErrorCodes contentInvalidId = const ExceptionsPlatformErrorCodes._internal(106);
  static const ExceptionsPlatformErrorCodes contentPhysicalFileDeletionError = const ExceptionsPlatformErrorCodes._internal(107);
  static const ExceptionsPlatformErrorCodes contentPhysicalFileCreationError = const ExceptionsPlatformErrorCodes._internal(108);
  static const ExceptionsPlatformErrorCodes contentPerforceSubmissionError = const ExceptionsPlatformErrorCodes._internal(109);
  static const ExceptionsPlatformErrorCodes contentPerforceInitializationError = const ExceptionsPlatformErrorCodes._internal(110);
  static const ExceptionsPlatformErrorCodes contentDeploymentPackageNotReadyError = const ExceptionsPlatformErrorCodes._internal(111);
  static const ExceptionsPlatformErrorCodes contentUploadFailed = const ExceptionsPlatformErrorCodes._internal(112);
  static const ExceptionsPlatformErrorCodes contentTooManyResults = const ExceptionsPlatformErrorCodes._internal(113);
  static const ExceptionsPlatformErrorCodes contentInvalidState = const ExceptionsPlatformErrorCodes._internal(115);
  static const ExceptionsPlatformErrorCodes contentNavigationParentNotFound = const ExceptionsPlatformErrorCodes._internal(116);
  static const ExceptionsPlatformErrorCodes contentNavigationParentUpdateError = const ExceptionsPlatformErrorCodes._internal(117);
  static const ExceptionsPlatformErrorCodes deploymentPackageNotEditable = const ExceptionsPlatformErrorCodes._internal(118);
  static const ExceptionsPlatformErrorCodes contentValidationError = const ExceptionsPlatformErrorCodes._internal(119);
  static const ExceptionsPlatformErrorCodes contentPropertiesValidationError = const ExceptionsPlatformErrorCodes._internal(120);
  static const ExceptionsPlatformErrorCodes contentTypeNotFound = const ExceptionsPlatformErrorCodes._internal(121);
  static const ExceptionsPlatformErrorCodes deploymentPackageNotFound = const ExceptionsPlatformErrorCodes._internal(122);
  static const ExceptionsPlatformErrorCodes contentSearchInvalidParameters = const ExceptionsPlatformErrorCodes._internal(123);
  static const ExceptionsPlatformErrorCodes contentItemPropertyAggregationError = const ExceptionsPlatformErrorCodes._internal(124);
  static const ExceptionsPlatformErrorCodes deploymentPackageFileNotFound = const ExceptionsPlatformErrorCodes._internal(125);
  static const ExceptionsPlatformErrorCodes contentPerforceFileHistoryNotFound = const ExceptionsPlatformErrorCodes._internal(126);
  static const ExceptionsPlatformErrorCodes contentAssetZipCreationFailure = const ExceptionsPlatformErrorCodes._internal(127);
  static const ExceptionsPlatformErrorCodes contentAssetZipCreationBusy = const ExceptionsPlatformErrorCodes._internal(128);
  static const ExceptionsPlatformErrorCodes contentProjectNotFound = const ExceptionsPlatformErrorCodes._internal(129);
  static const ExceptionsPlatformErrorCodes contentFolderNotFound = const ExceptionsPlatformErrorCodes._internal(130);
  static const ExceptionsPlatformErrorCodes contentPackagesInconsistent = const ExceptionsPlatformErrorCodes._internal(131);
  static const ExceptionsPlatformErrorCodes contentPackagesInvalidState = const ExceptionsPlatformErrorCodes._internal(132);
  static const ExceptionsPlatformErrorCodes contentPackagesInconsistentType = const ExceptionsPlatformErrorCodes._internal(133);
  static const ExceptionsPlatformErrorCodes contentCannotDeletePackage = const ExceptionsPlatformErrorCodes._internal(134);
  static const ExceptionsPlatformErrorCodes contentLockedForChanges = const ExceptionsPlatformErrorCodes._internal(135);
  static const ExceptionsPlatformErrorCodes contentFileUploadFailed = const ExceptionsPlatformErrorCodes._internal(136);
  static const ExceptionsPlatformErrorCodes contentNotReviewed = const ExceptionsPlatformErrorCodes._internal(137);
  static const ExceptionsPlatformErrorCodes contentPermissionDenied = const ExceptionsPlatformErrorCodes._internal(138);
  static const ExceptionsPlatformErrorCodes contentInvalidExternalUrl = const ExceptionsPlatformErrorCodes._internal(139);
  static const ExceptionsPlatformErrorCodes contentExternalFileCannotBeImportedLocally = const ExceptionsPlatformErrorCodes._internal(140);
  static const ExceptionsPlatformErrorCodes contentTagSaveFailure = const ExceptionsPlatformErrorCodes._internal(141);
  static const ExceptionsPlatformErrorCodes contentPerforceUnmatchedFileError = const ExceptionsPlatformErrorCodes._internal(142);
  static const ExceptionsPlatformErrorCodes contentPerforceChangelistResultNotFound = const ExceptionsPlatformErrorCodes._internal(143);
  static const ExceptionsPlatformErrorCodes contentPerforceChangelistFileItemsNotFound = const ExceptionsPlatformErrorCodes._internal(144);
  static const ExceptionsPlatformErrorCodes contentPerforceInvalidRevisionError = const ExceptionsPlatformErrorCodes._internal(145);
  static const ExceptionsPlatformErrorCodes contentUnloadedSaveResult = const ExceptionsPlatformErrorCodes._internal(146);
  static const ExceptionsPlatformErrorCodes contentPropertyInvalidNumber = const ExceptionsPlatformErrorCodes._internal(147);
  static const ExceptionsPlatformErrorCodes contentPropertyInvalidUrl = const ExceptionsPlatformErrorCodes._internal(148);
  static const ExceptionsPlatformErrorCodes contentPropertyInvalidDate = const ExceptionsPlatformErrorCodes._internal(149);
  static const ExceptionsPlatformErrorCodes contentPropertyInvalidSet = const ExceptionsPlatformErrorCodes._internal(150);
  static const ExceptionsPlatformErrorCodes contentPropertyCannotDeserialize = const ExceptionsPlatformErrorCodes._internal(151);
  static const ExceptionsPlatformErrorCodes contentRegexValidationFailOnProperty = const ExceptionsPlatformErrorCodes._internal(152);
  static const ExceptionsPlatformErrorCodes contentMaxLengthFailOnProperty = const ExceptionsPlatformErrorCodes._internal(153);
  static const ExceptionsPlatformErrorCodes contentPropertyUnexpectedDeserializationError = const ExceptionsPlatformErrorCodes._internal(154);
  static const ExceptionsPlatformErrorCodes contentPropertyRequired = const ExceptionsPlatformErrorCodes._internal(155);
  static const ExceptionsPlatformErrorCodes contentCannotCreateFile = const ExceptionsPlatformErrorCodes._internal(156);
  static const ExceptionsPlatformErrorCodes contentInvalidMigrationFile = const ExceptionsPlatformErrorCodes._internal(157);
  static const ExceptionsPlatformErrorCodes contentMigrationAlteringProcessedItem = const ExceptionsPlatformErrorCodes._internal(158);
  static const ExceptionsPlatformErrorCodes contentPropertyDefinitionNotFound = const ExceptionsPlatformErrorCodes._internal(159);
  static const ExceptionsPlatformErrorCodes contentReviewDataChanged = const ExceptionsPlatformErrorCodes._internal(160);
  static const ExceptionsPlatformErrorCodes contentRollbackRevisionNotInPackage = const ExceptionsPlatformErrorCodes._internal(161);
  static const ExceptionsPlatformErrorCodes contentItemNotBasedOnLatestRevision = const ExceptionsPlatformErrorCodes._internal(162);
  static const ExceptionsPlatformErrorCodes contentUnauthorized = const ExceptionsPlatformErrorCodes._internal(163);
  static const ExceptionsPlatformErrorCodes contentCannotCreateDeploymentPackage = const ExceptionsPlatformErrorCodes._internal(164);
  static const ExceptionsPlatformErrorCodes contentUserNotFound = const ExceptionsPlatformErrorCodes._internal(165);
  static const ExceptionsPlatformErrorCodes contentLocalePermissionDenied = const ExceptionsPlatformErrorCodes._internal(166);
  static const ExceptionsPlatformErrorCodes contentInvalidLinkToInternalEnvironment = const ExceptionsPlatformErrorCodes._internal(167);
  static const ExceptionsPlatformErrorCodes contentInvalidBlacklistedContent = const ExceptionsPlatformErrorCodes._internal(168);
  static const ExceptionsPlatformErrorCodes contentMacroMalformedNoContentId = const ExceptionsPlatformErrorCodes._internal(169);
  static const ExceptionsPlatformErrorCodes contentMacroMalformedNoTemplateType = const ExceptionsPlatformErrorCodes._internal(170);
  static const ExceptionsPlatformErrorCodes contentIllegalBNetMembershipId = const ExceptionsPlatformErrorCodes._internal(171);
  static const ExceptionsPlatformErrorCodes contentLocaleDidNotMatchExpected = const ExceptionsPlatformErrorCodes._internal(172);
  static const ExceptionsPlatformErrorCodes contentBabelCallFailed = const ExceptionsPlatformErrorCodes._internal(173);
  static const ExceptionsPlatformErrorCodes contentEnglishPostLiveForbidden = const ExceptionsPlatformErrorCodes._internal(174);
  static const ExceptionsPlatformErrorCodes contentLocaleEditPermissionDenied = const ExceptionsPlatformErrorCodes._internal(175);
  static const ExceptionsPlatformErrorCodes userNonUniqueName = const ExceptionsPlatformErrorCodes._internal(200);
  static const ExceptionsPlatformErrorCodes userManualLinkingStepRequired = const ExceptionsPlatformErrorCodes._internal(201);
  static const ExceptionsPlatformErrorCodes userCreateUnknownSqlResult = const ExceptionsPlatformErrorCodes._internal(202);
  static const ExceptionsPlatformErrorCodes userCreateUnknownSqlException = const ExceptionsPlatformErrorCodes._internal(203);
  static const ExceptionsPlatformErrorCodes userMalformedMembershipId = const ExceptionsPlatformErrorCodes._internal(204);
  static const ExceptionsPlatformErrorCodes userCannotFindRequestedUser = const ExceptionsPlatformErrorCodes._internal(205);
  static const ExceptionsPlatformErrorCodes userCannotLoadAccountCredentialLinkInfo = const ExceptionsPlatformErrorCodes._internal(206);
  static const ExceptionsPlatformErrorCodes userInvalidMobileAppType = const ExceptionsPlatformErrorCodes._internal(207);
  static const ExceptionsPlatformErrorCodes userMissingMobilePairingInfo = const ExceptionsPlatformErrorCodes._internal(208);
  static const ExceptionsPlatformErrorCodes userCannotGenerateMobileKeyWhileUsingMobileCredential = const ExceptionsPlatformErrorCodes._internal(209);
  static const ExceptionsPlatformErrorCodes userGenerateMobileKeyExistingSlotCollision = const ExceptionsPlatformErrorCodes._internal(210);
  static const ExceptionsPlatformErrorCodes userDisplayNameMissingOrInvalid = const ExceptionsPlatformErrorCodes._internal(211);
  static const ExceptionsPlatformErrorCodes userCannotLoadAccountProfileData = const ExceptionsPlatformErrorCodes._internal(212);
  static const ExceptionsPlatformErrorCodes userCannotSaveUserProfileData = const ExceptionsPlatformErrorCodes._internal(213);
  static const ExceptionsPlatformErrorCodes userEmailMissingOrInvalid = const ExceptionsPlatformErrorCodes._internal(214);
  static const ExceptionsPlatformErrorCodes userTermsOfUseRequired = const ExceptionsPlatformErrorCodes._internal(215);
  static const ExceptionsPlatformErrorCodes userCannotCreateNewAccountWhileLoggedIn = const ExceptionsPlatformErrorCodes._internal(216);
  static const ExceptionsPlatformErrorCodes userCannotResolveCentralAccount = const ExceptionsPlatformErrorCodes._internal(217);
  static const ExceptionsPlatformErrorCodes userInvalidAvatar = const ExceptionsPlatformErrorCodes._internal(218);
  static const ExceptionsPlatformErrorCodes userMissingCreatedUserResult = const ExceptionsPlatformErrorCodes._internal(219);
  static const ExceptionsPlatformErrorCodes userCannotChangeUniqueNameYet = const ExceptionsPlatformErrorCodes._internal(220);
  static const ExceptionsPlatformErrorCodes userCannotChangeDisplayNameYet = const ExceptionsPlatformErrorCodes._internal(221);
  static const ExceptionsPlatformErrorCodes userCannotChangeEmail = const ExceptionsPlatformErrorCodes._internal(222);
  static const ExceptionsPlatformErrorCodes userUniqueNameMustStartWithLetter = const ExceptionsPlatformErrorCodes._internal(223);
  static const ExceptionsPlatformErrorCodes userNoLinkedAccountsSupportFriendListings = const ExceptionsPlatformErrorCodes._internal(224);
  static const ExceptionsPlatformErrorCodes userAcknowledgmentTableFull = const ExceptionsPlatformErrorCodes._internal(225);
  static const ExceptionsPlatformErrorCodes userCreationDestinyMembershipRequired = const ExceptionsPlatformErrorCodes._internal(226);
  static const ExceptionsPlatformErrorCodes userFriendsTokenNeedsRefresh = const ExceptionsPlatformErrorCodes._internal(227);
  static const ExceptionsPlatformErrorCodes messagingUnknownError = const ExceptionsPlatformErrorCodes._internal(300);
  static const ExceptionsPlatformErrorCodes messagingSelfError = const ExceptionsPlatformErrorCodes._internal(301);
  static const ExceptionsPlatformErrorCodes messagingSendThrottle = const ExceptionsPlatformErrorCodes._internal(302);
  static const ExceptionsPlatformErrorCodes messagingNoBody = const ExceptionsPlatformErrorCodes._internal(303);
  static const ExceptionsPlatformErrorCodes messagingTooManyUsers = const ExceptionsPlatformErrorCodes._internal(304);
  static const ExceptionsPlatformErrorCodes messagingCanNotLeaveConversation = const ExceptionsPlatformErrorCodes._internal(305);
  static const ExceptionsPlatformErrorCodes messagingUnableToSend = const ExceptionsPlatformErrorCodes._internal(306);
  static const ExceptionsPlatformErrorCodes messagingDeletedUserForbidden = const ExceptionsPlatformErrorCodes._internal(307);
  static const ExceptionsPlatformErrorCodes messagingCannotDeleteExternalConversation = const ExceptionsPlatformErrorCodes._internal(308);
  static const ExceptionsPlatformErrorCodes messagingGroupChatDisabled = const ExceptionsPlatformErrorCodes._internal(309);
  static const ExceptionsPlatformErrorCodes messagingMustIncludeSelfInPrivateMessage = const ExceptionsPlatformErrorCodes._internal(310);
  static const ExceptionsPlatformErrorCodes messagingSenderIsBanned = const ExceptionsPlatformErrorCodes._internal(311);
  static const ExceptionsPlatformErrorCodes messagingGroupOptionalChatExceededMaximum = const ExceptionsPlatformErrorCodes._internal(312);
  static const ExceptionsPlatformErrorCodes privateMessagingRequiresDestinyMembership = const ExceptionsPlatformErrorCodes._internal(313);
  static const ExceptionsPlatformErrorCodes addSurveyAnswersUnknownSqlException = const ExceptionsPlatformErrorCodes._internal(400);
  static const ExceptionsPlatformErrorCodes forumBodyCannotBeEmpty = const ExceptionsPlatformErrorCodes._internal(500);
  static const ExceptionsPlatformErrorCodes forumSubjectCannotBeEmptyOnTopicPost = const ExceptionsPlatformErrorCodes._internal(501);
  static const ExceptionsPlatformErrorCodes forumCannotLocateParentPost = const ExceptionsPlatformErrorCodes._internal(502);
  static const ExceptionsPlatformErrorCodes forumThreadLockedForReplies = const ExceptionsPlatformErrorCodes._internal(503);
  static const ExceptionsPlatformErrorCodes forumUnknownSqlResultDuringCreatePost = const ExceptionsPlatformErrorCodes._internal(504);
  static const ExceptionsPlatformErrorCodes forumUnknownTagCreationError = const ExceptionsPlatformErrorCodes._internal(505);
  static const ExceptionsPlatformErrorCodes forumUnknownSqlResultDuringTagItem = const ExceptionsPlatformErrorCodes._internal(506);
  static const ExceptionsPlatformErrorCodes forumUnknownExceptionCreatePost = const ExceptionsPlatformErrorCodes._internal(507);
  static const ExceptionsPlatformErrorCodes forumQuestionMustBeTopicPost = const ExceptionsPlatformErrorCodes._internal(508);
  static const ExceptionsPlatformErrorCodes forumExceptionDuringTagSearch = const ExceptionsPlatformErrorCodes._internal(509);
  static const ExceptionsPlatformErrorCodes forumExceptionDuringTopicRetrieval = const ExceptionsPlatformErrorCodes._internal(510);
  static const ExceptionsPlatformErrorCodes forumAliasedTagError = const ExceptionsPlatformErrorCodes._internal(511);
  static const ExceptionsPlatformErrorCodes forumCannotLocateThread = const ExceptionsPlatformErrorCodes._internal(512);
  static const ExceptionsPlatformErrorCodes forumUnknownExceptionEditPost = const ExceptionsPlatformErrorCodes._internal(513);
  static const ExceptionsPlatformErrorCodes forumCannotLocatePost = const ExceptionsPlatformErrorCodes._internal(514);
  static const ExceptionsPlatformErrorCodes forumUnknownExceptionGetOrCreateTags = const ExceptionsPlatformErrorCodes._internal(515);
  static const ExceptionsPlatformErrorCodes forumEditPermissionDenied = const ExceptionsPlatformErrorCodes._internal(516);
  static const ExceptionsPlatformErrorCodes forumUnknownSqlResultDuringTagIdRetrieval = const ExceptionsPlatformErrorCodes._internal(517);
  static const ExceptionsPlatformErrorCodes forumCannotGetRating = const ExceptionsPlatformErrorCodes._internal(518);
  static const ExceptionsPlatformErrorCodes forumUnknownExceptionGetRating = const ExceptionsPlatformErrorCodes._internal(519);
  static const ExceptionsPlatformErrorCodes forumRatingsAccessError = const ExceptionsPlatformErrorCodes._internal(520);
  static const ExceptionsPlatformErrorCodes forumRelatedPostAccessError = const ExceptionsPlatformErrorCodes._internal(521);
  static const ExceptionsPlatformErrorCodes forumLatestReplyAccessError = const ExceptionsPlatformErrorCodes._internal(522);
  static const ExceptionsPlatformErrorCodes forumUserStatusAccessError = const ExceptionsPlatformErrorCodes._internal(523);
  static const ExceptionsPlatformErrorCodes forumAuthorAccessError = const ExceptionsPlatformErrorCodes._internal(524);
  static const ExceptionsPlatformErrorCodes forumGroupAccessError = const ExceptionsPlatformErrorCodes._internal(525);
  static const ExceptionsPlatformErrorCodes forumUrlExpectedButMissing = const ExceptionsPlatformErrorCodes._internal(526);
  static const ExceptionsPlatformErrorCodes forumRepliesCannotBeEmpty = const ExceptionsPlatformErrorCodes._internal(527);
  static const ExceptionsPlatformErrorCodes forumRepliesCannotBeInDifferentGroups = const ExceptionsPlatformErrorCodes._internal(528);
  static const ExceptionsPlatformErrorCodes forumSubTopicCannotBeCreatedAtThisThreadLevel = const ExceptionsPlatformErrorCodes._internal(529);
  static const ExceptionsPlatformErrorCodes forumCannotCreateContentTopic = const ExceptionsPlatformErrorCodes._internal(530);
  static const ExceptionsPlatformErrorCodes forumTopicDoesNotExist = const ExceptionsPlatformErrorCodes._internal(531);
  static const ExceptionsPlatformErrorCodes forumContentCommentsNotAllowed = const ExceptionsPlatformErrorCodes._internal(532);
  static const ExceptionsPlatformErrorCodes forumUnknownSqlResultDuringEditPost = const ExceptionsPlatformErrorCodes._internal(533);
  static const ExceptionsPlatformErrorCodes forumUnknownSqlResultDuringGetPost = const ExceptionsPlatformErrorCodes._internal(534);
  static const ExceptionsPlatformErrorCodes forumPostValidationBadUrl = const ExceptionsPlatformErrorCodes._internal(535);
  static const ExceptionsPlatformErrorCodes forumBodyTooLong = const ExceptionsPlatformErrorCodes._internal(536);
  static const ExceptionsPlatformErrorCodes forumSubjectTooLong = const ExceptionsPlatformErrorCodes._internal(537);
  static const ExceptionsPlatformErrorCodes forumAnnouncementNotAllowed = const ExceptionsPlatformErrorCodes._internal(538);
  static const ExceptionsPlatformErrorCodes forumCannotShareOwnPost = const ExceptionsPlatformErrorCodes._internal(539);
  static const ExceptionsPlatformErrorCodes forumEditNoOp = const ExceptionsPlatformErrorCodes._internal(540);
  static const ExceptionsPlatformErrorCodes forumUnknownDatabaseErrorDuringGetPost = const ExceptionsPlatformErrorCodes._internal(541);
  static const ExceptionsPlatformErrorCodes forumExceeedMaximumRowLimit = const ExceptionsPlatformErrorCodes._internal(542);
  static const ExceptionsPlatformErrorCodes forumCannotSharePrivatePost = const ExceptionsPlatformErrorCodes._internal(543);
  static const ExceptionsPlatformErrorCodes forumCannotCrossPostBetweenGroups = const ExceptionsPlatformErrorCodes._internal(544);
  static const ExceptionsPlatformErrorCodes forumIncompatibleCategories = const ExceptionsPlatformErrorCodes._internal(555);
  static const ExceptionsPlatformErrorCodes forumCannotUseTheseCategoriesOnNonTopicPost = const ExceptionsPlatformErrorCodes._internal(556);
  static const ExceptionsPlatformErrorCodes forumCanOnlyDeleteTopics = const ExceptionsPlatformErrorCodes._internal(557);
  static const ExceptionsPlatformErrorCodes forumDeleteSqlException = const ExceptionsPlatformErrorCodes._internal(558);
  static const ExceptionsPlatformErrorCodes forumDeleteSqlUnknownResult = const ExceptionsPlatformErrorCodes._internal(559);
  static const ExceptionsPlatformErrorCodes forumTooManyTags = const ExceptionsPlatformErrorCodes._internal(560);
  static const ExceptionsPlatformErrorCodes forumCanOnlyRateTopics = const ExceptionsPlatformErrorCodes._internal(561);
  static const ExceptionsPlatformErrorCodes forumBannedPostsCannotBeEdited = const ExceptionsPlatformErrorCodes._internal(562);
  static const ExceptionsPlatformErrorCodes forumThreadRootIsBanned = const ExceptionsPlatformErrorCodes._internal(563);
  static const ExceptionsPlatformErrorCodes forumCannotUseOfficialTagCategoryAsTag = const ExceptionsPlatformErrorCodes._internal(564);
  static const ExceptionsPlatformErrorCodes forumAnswerCannotBeMadeOnCreatePost = const ExceptionsPlatformErrorCodes._internal(565);
  static const ExceptionsPlatformErrorCodes forumAnswerCannotBeMadeOnEditPost = const ExceptionsPlatformErrorCodes._internal(566);
  static const ExceptionsPlatformErrorCodes forumAnswerPostIdIsNotADirectReplyOfQuestion = const ExceptionsPlatformErrorCodes._internal(567);
  static const ExceptionsPlatformErrorCodes forumAnswerTopicIdIsNotAQuestion = const ExceptionsPlatformErrorCodes._internal(568);
  static const ExceptionsPlatformErrorCodes forumUnknownExceptionDuringMarkAnswer = const ExceptionsPlatformErrorCodes._internal(569);
  static const ExceptionsPlatformErrorCodes forumUnknownSqlResultDuringMarkAnswer = const ExceptionsPlatformErrorCodes._internal(570);
  static const ExceptionsPlatformErrorCodes forumCannotRateYourOwnPosts = const ExceptionsPlatformErrorCodes._internal(571);
  static const ExceptionsPlatformErrorCodes forumPollsMustBeTheFirstPostInTopic = const ExceptionsPlatformErrorCodes._internal(572);
  static const ExceptionsPlatformErrorCodes forumInvalidPollInput = const ExceptionsPlatformErrorCodes._internal(573);
  static const ExceptionsPlatformErrorCodes forumGroupAdminEditNonMember = const ExceptionsPlatformErrorCodes._internal(574);
  static const ExceptionsPlatformErrorCodes forumCannotEditModeratorEditedPost = const ExceptionsPlatformErrorCodes._internal(575);
  static const ExceptionsPlatformErrorCodes forumRequiresDestinyMembership = const ExceptionsPlatformErrorCodes._internal(576);
  static const ExceptionsPlatformErrorCodes forumUnexpectedError = const ExceptionsPlatformErrorCodes._internal(577);
  static const ExceptionsPlatformErrorCodes forumAgeLock = const ExceptionsPlatformErrorCodes._internal(578);
  static const ExceptionsPlatformErrorCodes forumMaxPages = const ExceptionsPlatformErrorCodes._internal(579);
  static const ExceptionsPlatformErrorCodes forumMaxPagesOldestFirst = const ExceptionsPlatformErrorCodes._internal(580);
  static const ExceptionsPlatformErrorCodes forumCannotApplyForumIdWithoutTags = const ExceptionsPlatformErrorCodes._internal(581);
  static const ExceptionsPlatformErrorCodes forumCannotApplyForumIdToNonTopics = const ExceptionsPlatformErrorCodes._internal(582);
  static const ExceptionsPlatformErrorCodes forumCannotDownvoteCommunityCreations = const ExceptionsPlatformErrorCodes._internal(583);
  static const ExceptionsPlatformErrorCodes forumTopicsMustHaveOfficialCategory = const ExceptionsPlatformErrorCodes._internal(584);
  static const ExceptionsPlatformErrorCodes forumRecruitmentTopicMalformed = const ExceptionsPlatformErrorCodes._internal(585);
  static const ExceptionsPlatformErrorCodes forumRecruitmentTopicNotFound = const ExceptionsPlatformErrorCodes._internal(586);
  static const ExceptionsPlatformErrorCodes forumRecruitmentTopicNoSlotsRemaining = const ExceptionsPlatformErrorCodes._internal(587);
  static const ExceptionsPlatformErrorCodes forumRecruitmentTopicKickBan = const ExceptionsPlatformErrorCodes._internal(588);
  static const ExceptionsPlatformErrorCodes forumRecruitmentTopicRequirementsNotMet = const ExceptionsPlatformErrorCodes._internal(589);
  static const ExceptionsPlatformErrorCodes forumRecruitmentTopicNoPlayers = const ExceptionsPlatformErrorCodes._internal(590);
  static const ExceptionsPlatformErrorCodes forumRecruitmentApproveFailMessageBan = const ExceptionsPlatformErrorCodes._internal(591);
  static const ExceptionsPlatformErrorCodes forumRecruitmentGlobalBan = const ExceptionsPlatformErrorCodes._internal(592);
  static const ExceptionsPlatformErrorCodes forumUserBannedFromThisTopic = const ExceptionsPlatformErrorCodes._internal(593);
  static const ExceptionsPlatformErrorCodes forumRecruitmentFireteamMembersOnly = const ExceptionsPlatformErrorCodes._internal(594);
  static const ExceptionsPlatformErrorCodes forumRequiresDestiny2Progress = const ExceptionsPlatformErrorCodes._internal(595);
  static const ExceptionsPlatformErrorCodes groupMembershipApplicationAlreadyResolved = const ExceptionsPlatformErrorCodes._internal(601);
  static const ExceptionsPlatformErrorCodes groupMembershipAlreadyApplied = const ExceptionsPlatformErrorCodes._internal(602);
  static const ExceptionsPlatformErrorCodes groupMembershipInsufficientPrivileges = const ExceptionsPlatformErrorCodes._internal(603);
  static const ExceptionsPlatformErrorCodes groupIdNotReturnedFromCreation = const ExceptionsPlatformErrorCodes._internal(604);
  static const ExceptionsPlatformErrorCodes groupSearchInvalidParameters = const ExceptionsPlatformErrorCodes._internal(605);
  static const ExceptionsPlatformErrorCodes groupMembershipPendingApplicationNotFound = const ExceptionsPlatformErrorCodes._internal(606);
  static const ExceptionsPlatformErrorCodes groupInvalidId = const ExceptionsPlatformErrorCodes._internal(607);
  static const ExceptionsPlatformErrorCodes groupInvalidMembershipId = const ExceptionsPlatformErrorCodes._internal(608);
  static const ExceptionsPlatformErrorCodes groupInvalidMembershipType = const ExceptionsPlatformErrorCodes._internal(609);
  static const ExceptionsPlatformErrorCodes groupMissingTags = const ExceptionsPlatformErrorCodes._internal(610);
  static const ExceptionsPlatformErrorCodes groupMembershipNotFound = const ExceptionsPlatformErrorCodes._internal(611);
  static const ExceptionsPlatformErrorCodes groupInvalidRating = const ExceptionsPlatformErrorCodes._internal(612);
  static const ExceptionsPlatformErrorCodes groupUserFollowingAccessError = const ExceptionsPlatformErrorCodes._internal(613);
  static const ExceptionsPlatformErrorCodes groupUserMembershipAccessError = const ExceptionsPlatformErrorCodes._internal(614);
  static const ExceptionsPlatformErrorCodes groupCreatorAccessError = const ExceptionsPlatformErrorCodes._internal(615);
  static const ExceptionsPlatformErrorCodes groupAdminAccessError = const ExceptionsPlatformErrorCodes._internal(616);
  static const ExceptionsPlatformErrorCodes groupPrivatePostNotViewable = const ExceptionsPlatformErrorCodes._internal(617);
  static const ExceptionsPlatformErrorCodes groupMembershipNotLoggedIn = const ExceptionsPlatformErrorCodes._internal(618);
  static const ExceptionsPlatformErrorCodes groupNotDeleted = const ExceptionsPlatformErrorCodes._internal(619);
  static const ExceptionsPlatformErrorCodes groupUnknownErrorUndeletingGroup = const ExceptionsPlatformErrorCodes._internal(620);
  static const ExceptionsPlatformErrorCodes groupDeleted = const ExceptionsPlatformErrorCodes._internal(621);
  static const ExceptionsPlatformErrorCodes groupNotFound = const ExceptionsPlatformErrorCodes._internal(622);
  static const ExceptionsPlatformErrorCodes groupMemberBanned = const ExceptionsPlatformErrorCodes._internal(623);
  static const ExceptionsPlatformErrorCodes groupMembershipClosed = const ExceptionsPlatformErrorCodes._internal(624);
  static const ExceptionsPlatformErrorCodes groupPrivatePostOverrideError = const ExceptionsPlatformErrorCodes._internal(625);
  static const ExceptionsPlatformErrorCodes groupNameTaken = const ExceptionsPlatformErrorCodes._internal(626);
  static const ExceptionsPlatformErrorCodes groupDeletionGracePeriodExpired = const ExceptionsPlatformErrorCodes._internal(627);
  static const ExceptionsPlatformErrorCodes groupCannotCheckBanStatus = const ExceptionsPlatformErrorCodes._internal(628);
  static const ExceptionsPlatformErrorCodes groupMaximumMembershipCountReached = const ExceptionsPlatformErrorCodes._internal(629);
  static const ExceptionsPlatformErrorCodes noDestinyAccountForClanPlatform = const ExceptionsPlatformErrorCodes._internal(630);
  static const ExceptionsPlatformErrorCodes alreadyRequestingMembershipForClanPlatform = const ExceptionsPlatformErrorCodes._internal(631);
  static const ExceptionsPlatformErrorCodes alreadyClanMemberOnPlatform = const ExceptionsPlatformErrorCodes._internal(632);
  static const ExceptionsPlatformErrorCodes groupJoinedCannotSetClanName = const ExceptionsPlatformErrorCodes._internal(633);
  static const ExceptionsPlatformErrorCodes groupLeftCannotClearClanName = const ExceptionsPlatformErrorCodes._internal(634);
  static const ExceptionsPlatformErrorCodes groupRelationshipRequestPending = const ExceptionsPlatformErrorCodes._internal(635);
  static const ExceptionsPlatformErrorCodes groupRelationshipRequestBlocked = const ExceptionsPlatformErrorCodes._internal(636);
  static const ExceptionsPlatformErrorCodes groupRelationshipRequestNotFound = const ExceptionsPlatformErrorCodes._internal(637);
  static const ExceptionsPlatformErrorCodes groupRelationshipBlockNotFound = const ExceptionsPlatformErrorCodes._internal(638);
  static const ExceptionsPlatformErrorCodes groupRelationshipNotFound = const ExceptionsPlatformErrorCodes._internal(639);
  static const ExceptionsPlatformErrorCodes groupAlreadyAllied = const ExceptionsPlatformErrorCodes._internal(641);
  static const ExceptionsPlatformErrorCodes groupAlreadyMember = const ExceptionsPlatformErrorCodes._internal(642);
  static const ExceptionsPlatformErrorCodes groupRelationshipAlreadyExists = const ExceptionsPlatformErrorCodes._internal(643);
  static const ExceptionsPlatformErrorCodes invalidGroupTypesForRelationshipRequest = const ExceptionsPlatformErrorCodes._internal(644);
  static const ExceptionsPlatformErrorCodes groupAtMaximumAlliances = const ExceptionsPlatformErrorCodes._internal(646);
  static const ExceptionsPlatformErrorCodes groupCannotSetClanOnlySettings = const ExceptionsPlatformErrorCodes._internal(647);
  static const ExceptionsPlatformErrorCodes clanCannotSetTwoDefaultPostTypes = const ExceptionsPlatformErrorCodes._internal(648);
  static const ExceptionsPlatformErrorCodes groupMemberInvalidMemberType = const ExceptionsPlatformErrorCodes._internal(649);
  static const ExceptionsPlatformErrorCodes groupInvalidPlatformType = const ExceptionsPlatformErrorCodes._internal(650);
  static const ExceptionsPlatformErrorCodes groupMemberInvalidSort = const ExceptionsPlatformErrorCodes._internal(651);
  static const ExceptionsPlatformErrorCodes groupInvalidResolveState = const ExceptionsPlatformErrorCodes._internal(652);
  static const ExceptionsPlatformErrorCodes clanAlreadyEnabledForPlatform = const ExceptionsPlatformErrorCodes._internal(653);
  static const ExceptionsPlatformErrorCodes clanNotEnabledForPlatform = const ExceptionsPlatformErrorCodes._internal(654);
  static const ExceptionsPlatformErrorCodes clanEnabledButCouldNotJoinNoAccount = const ExceptionsPlatformErrorCodes._internal(655);
  static const ExceptionsPlatformErrorCodes clanEnabledButCouldNotJoinAlreadyMember = const ExceptionsPlatformErrorCodes._internal(656);
  static const ExceptionsPlatformErrorCodes clanCannotJoinNoCredential = const ExceptionsPlatformErrorCodes._internal(657);
  static const ExceptionsPlatformErrorCodes noClanMembershipForPlatform = const ExceptionsPlatformErrorCodes._internal(658);
  static const ExceptionsPlatformErrorCodes groupToGroupFollowLimitReached = const ExceptionsPlatformErrorCodes._internal(659);
  static const ExceptionsPlatformErrorCodes childGroupAlreadyInAlliance = const ExceptionsPlatformErrorCodes._internal(660);
  static const ExceptionsPlatformErrorCodes ownerGroupAlreadyInAlliance = const ExceptionsPlatformErrorCodes._internal(661);
  static const ExceptionsPlatformErrorCodes allianceOwnerCannotJoinAlliance = const ExceptionsPlatformErrorCodes._internal(662);
  static const ExceptionsPlatformErrorCodes groupNotInAlliance = const ExceptionsPlatformErrorCodes._internal(663);
  static const ExceptionsPlatformErrorCodes childGroupCannotInviteToAlliance = const ExceptionsPlatformErrorCodes._internal(664);
  static const ExceptionsPlatformErrorCodes groupToGroupAlreadyFollowed = const ExceptionsPlatformErrorCodes._internal(665);
  static const ExceptionsPlatformErrorCodes groupToGroupNotFollowing = const ExceptionsPlatformErrorCodes._internal(666);
  static const ExceptionsPlatformErrorCodes clanMaximumMembershipReached = const ExceptionsPlatformErrorCodes._internal(667);
  static const ExceptionsPlatformErrorCodes clanNameNotValid = const ExceptionsPlatformErrorCodes._internal(668);
  static const ExceptionsPlatformErrorCodes clanNameNotValidError = const ExceptionsPlatformErrorCodes._internal(669);
  static const ExceptionsPlatformErrorCodes allianceOwnerNotDefined = const ExceptionsPlatformErrorCodes._internal(670);
  static const ExceptionsPlatformErrorCodes allianceChildNotDefined = const ExceptionsPlatformErrorCodes._internal(671);
  static const ExceptionsPlatformErrorCodes clanCultureIllegalCharacters = const ExceptionsPlatformErrorCodes._internal(672);
  static const ExceptionsPlatformErrorCodes clanTagIllegalCharacters = const ExceptionsPlatformErrorCodes._internal(673);
  static const ExceptionsPlatformErrorCodes clanRequiresInvitation = const ExceptionsPlatformErrorCodes._internal(674);
  static const ExceptionsPlatformErrorCodes clanMembershipClosed = const ExceptionsPlatformErrorCodes._internal(675);
  static const ExceptionsPlatformErrorCodes clanInviteAlreadyMember = const ExceptionsPlatformErrorCodes._internal(676);
  static const ExceptionsPlatformErrorCodes groupInviteAlreadyMember = const ExceptionsPlatformErrorCodes._internal(677);
  static const ExceptionsPlatformErrorCodes groupJoinApprovalRequired = const ExceptionsPlatformErrorCodes._internal(678);
  static const ExceptionsPlatformErrorCodes clanTagRequired = const ExceptionsPlatformErrorCodes._internal(679);
  static const ExceptionsPlatformErrorCodes groupNameCannotStartOrEndWithWhiteSpace = const ExceptionsPlatformErrorCodes._internal(680);
  static const ExceptionsPlatformErrorCodes clanCallsignCannotStartOrEndWithWhiteSpace = const ExceptionsPlatformErrorCodes._internal(681);
  static const ExceptionsPlatformErrorCodes clanMigrationFailed = const ExceptionsPlatformErrorCodes._internal(682);
  static const ExceptionsPlatformErrorCodes clanNotEnabledAlreadyMemberOfAnotherClan = const ExceptionsPlatformErrorCodes._internal(683);
  static const ExceptionsPlatformErrorCodes groupModerationNotPermittedOnNonMembers = const ExceptionsPlatformErrorCodes._internal(684);
  static const ExceptionsPlatformErrorCodes clanCreationInWorldServerFailed = const ExceptionsPlatformErrorCodes._internal(685);
  static const ExceptionsPlatformErrorCodes clanNotFound = const ExceptionsPlatformErrorCodes._internal(686);
  static const ExceptionsPlatformErrorCodes clanMembershipLevelDoesNotPermitThatAction = const ExceptionsPlatformErrorCodes._internal(687);
  static const ExceptionsPlatformErrorCodes clanMemberNotFound = const ExceptionsPlatformErrorCodes._internal(688);
  static const ExceptionsPlatformErrorCodes clanMissingMembershipApprovers = const ExceptionsPlatformErrorCodes._internal(689);
  static const ExceptionsPlatformErrorCodes clanInWrongStateForRequestedAction = const ExceptionsPlatformErrorCodes._internal(690);
  static const ExceptionsPlatformErrorCodes clanNameAlreadyUsed = const ExceptionsPlatformErrorCodes._internal(691);
  static const ExceptionsPlatformErrorCodes clanTooFewMembers = const ExceptionsPlatformErrorCodes._internal(692);
  static const ExceptionsPlatformErrorCodes clanInfoCannotBeWhitespace = const ExceptionsPlatformErrorCodes._internal(693);
  static const ExceptionsPlatformErrorCodes groupCultureThrottle = const ExceptionsPlatformErrorCodes._internal(694);
  static const ExceptionsPlatformErrorCodes clanTargetDisallowsInvites = const ExceptionsPlatformErrorCodes._internal(695);
  static const ExceptionsPlatformErrorCodes clanInvalidOperation = const ExceptionsPlatformErrorCodes._internal(696);
  static const ExceptionsPlatformErrorCodes clanFounderCannotLeaveWithoutAbdication = const ExceptionsPlatformErrorCodes._internal(697);
  static const ExceptionsPlatformErrorCodes clanNameReserved = const ExceptionsPlatformErrorCodes._internal(698);
  static const ExceptionsPlatformErrorCodes clanApplicantInClanSoNowInvited = const ExceptionsPlatformErrorCodes._internal(699);
  static const ExceptionsPlatformErrorCodes activitiesUnknownException = const ExceptionsPlatformErrorCodes._internal(701);
  static const ExceptionsPlatformErrorCodes activitiesParameterNull = const ExceptionsPlatformErrorCodes._internal(702);
  static const ExceptionsPlatformErrorCodes activityCountsDiabled = const ExceptionsPlatformErrorCodes._internal(703);
  static const ExceptionsPlatformErrorCodes activitySearchInvalidParameters = const ExceptionsPlatformErrorCodes._internal(704);
  static const ExceptionsPlatformErrorCodes activityPermissionDenied = const ExceptionsPlatformErrorCodes._internal(705);
  static const ExceptionsPlatformErrorCodes shareAlreadyShared = const ExceptionsPlatformErrorCodes._internal(706);
  static const ExceptionsPlatformErrorCodes activityLoggingDisabled = const ExceptionsPlatformErrorCodes._internal(707);
  static const ExceptionsPlatformErrorCodes clanRequiresExistingDestinyAccount = const ExceptionsPlatformErrorCodes._internal(750);
  static const ExceptionsPlatformErrorCodes itemAlreadyFollowed = const ExceptionsPlatformErrorCodes._internal(801);
  static const ExceptionsPlatformErrorCodes itemNotFollowed = const ExceptionsPlatformErrorCodes._internal(802);
  static const ExceptionsPlatformErrorCodes cannotFollowSelf = const ExceptionsPlatformErrorCodes._internal(803);
  static const ExceptionsPlatformErrorCodes groupFollowLimitExceeded = const ExceptionsPlatformErrorCodes._internal(804);
  static const ExceptionsPlatformErrorCodes tagFollowLimitExceeded = const ExceptionsPlatformErrorCodes._internal(805);
  static const ExceptionsPlatformErrorCodes userFollowLimitExceeded = const ExceptionsPlatformErrorCodes._internal(806);
  static const ExceptionsPlatformErrorCodes followUnsupportedEntityType = const ExceptionsPlatformErrorCodes._internal(807);
  static const ExceptionsPlatformErrorCodes noValidTagsInList = const ExceptionsPlatformErrorCodes._internal(900);
  static const ExceptionsPlatformErrorCodes belowMinimumSuggestionLength = const ExceptionsPlatformErrorCodes._internal(901);
  static const ExceptionsPlatformErrorCodes cannotGetSuggestionsOnMultipleTagsSimultaneously = const ExceptionsPlatformErrorCodes._internal(902);
  static const ExceptionsPlatformErrorCodes notAValidPartialTag = const ExceptionsPlatformErrorCodes._internal(903);
  static const ExceptionsPlatformErrorCodes tagSuggestionsUnknownSqlResult = const ExceptionsPlatformErrorCodes._internal(904);
  static const ExceptionsPlatformErrorCodes tagsUnableToLoadPopularTagsFromDatabase = const ExceptionsPlatformErrorCodes._internal(905);
  static const ExceptionsPlatformErrorCodes tagInvalid = const ExceptionsPlatformErrorCodes._internal(906);
  static const ExceptionsPlatformErrorCodes tagNotFound = const ExceptionsPlatformErrorCodes._internal(907);
  static const ExceptionsPlatformErrorCodes singleTagExpected = const ExceptionsPlatformErrorCodes._internal(908);
  static const ExceptionsPlatformErrorCodes tagsExceededMaximumPerItem = const ExceptionsPlatformErrorCodes._internal(909);
  static const ExceptionsPlatformErrorCodes ignoreInvalidParameters = const ExceptionsPlatformErrorCodes._internal(1000);
  static const ExceptionsPlatformErrorCodes ignoreSqlException = const ExceptionsPlatformErrorCodes._internal(1001);
  static const ExceptionsPlatformErrorCodes ignoreErrorRetrievingGroupPermissions = const ExceptionsPlatformErrorCodes._internal(1002);
  static const ExceptionsPlatformErrorCodes ignoreErrorInsufficientPermission = const ExceptionsPlatformErrorCodes._internal(1003);
  static const ExceptionsPlatformErrorCodes ignoreErrorRetrievingItem = const ExceptionsPlatformErrorCodes._internal(1004);
  static const ExceptionsPlatformErrorCodes ignoreCannotIgnoreSelf = const ExceptionsPlatformErrorCodes._internal(1005);
  static const ExceptionsPlatformErrorCodes ignoreIllegalType = const ExceptionsPlatformErrorCodes._internal(1006);
  static const ExceptionsPlatformErrorCodes ignoreNotFound = const ExceptionsPlatformErrorCodes._internal(1007);
  static const ExceptionsPlatformErrorCodes ignoreUserGloballyIgnored = const ExceptionsPlatformErrorCodes._internal(1008);
  static const ExceptionsPlatformErrorCodes ignoreUserIgnored = const ExceptionsPlatformErrorCodes._internal(1009);
  static const ExceptionsPlatformErrorCodes notificationSettingInvalid = const ExceptionsPlatformErrorCodes._internal(1100);
  static const ExceptionsPlatformErrorCodes psnApiExpiredAccessToken = const ExceptionsPlatformErrorCodes._internal(1204);
  static const ExceptionsPlatformErrorCodes pSNExForbidden = const ExceptionsPlatformErrorCodes._internal(1205);
  static const ExceptionsPlatformErrorCodes pSNExSystemDisabled = const ExceptionsPlatformErrorCodes._internal(1218);
  static const ExceptionsPlatformErrorCodes psnApiErrorCodeUnknown = const ExceptionsPlatformErrorCodes._internal(1223);
  static const ExceptionsPlatformErrorCodes psnApiErrorWebException = const ExceptionsPlatformErrorCodes._internal(1224);
  static const ExceptionsPlatformErrorCodes psnApiBadRequest = const ExceptionsPlatformErrorCodes._internal(1225);
  static const ExceptionsPlatformErrorCodes psnApiAccessTokenRequired = const ExceptionsPlatformErrorCodes._internal(1226);
  static const ExceptionsPlatformErrorCodes psnApiInvalidAccessToken = const ExceptionsPlatformErrorCodes._internal(1227);
  static const ExceptionsPlatformErrorCodes psnApiBannedUser = const ExceptionsPlatformErrorCodes._internal(1229);
  static const ExceptionsPlatformErrorCodes psnApiAccountUpgradeRequired = const ExceptionsPlatformErrorCodes._internal(1230);
  static const ExceptionsPlatformErrorCodes psnApiServiceTemporarilyUnavailable = const ExceptionsPlatformErrorCodes._internal(1231);
  static const ExceptionsPlatformErrorCodes psnApiServerBusy = const ExceptionsPlatformErrorCodes._internal(1232);
  static const ExceptionsPlatformErrorCodes psnApiUnderMaintenance = const ExceptionsPlatformErrorCodes._internal(1233);
  static const ExceptionsPlatformErrorCodes psnApiProfileUserNotFound = const ExceptionsPlatformErrorCodes._internal(1234);
  static const ExceptionsPlatformErrorCodes psnApiProfilePrivacyRestriction = const ExceptionsPlatformErrorCodes._internal(1235);
  static const ExceptionsPlatformErrorCodes psnApiProfileUnderMaintenance = const ExceptionsPlatformErrorCodes._internal(1236);
  static const ExceptionsPlatformErrorCodes psnApiAccountAttributeMissing = const ExceptionsPlatformErrorCodes._internal(1237);
  static const ExceptionsPlatformErrorCodes psnApiNoPermission = const ExceptionsPlatformErrorCodes._internal(1238);
  static const ExceptionsPlatformErrorCodes psnApiTargetUserBlocked = const ExceptionsPlatformErrorCodes._internal(1239);
  static const ExceptionsPlatformErrorCodes xblExSystemDisabled = const ExceptionsPlatformErrorCodes._internal(1300);
  static const ExceptionsPlatformErrorCodes xblExUnknownError = const ExceptionsPlatformErrorCodes._internal(1301);
  static const ExceptionsPlatformErrorCodes xblApiErrorWebException = const ExceptionsPlatformErrorCodes._internal(1302);
  static const ExceptionsPlatformErrorCodes xblStsTokenInvalid = const ExceptionsPlatformErrorCodes._internal(1303);
  static const ExceptionsPlatformErrorCodes xblStsMissingToken = const ExceptionsPlatformErrorCodes._internal(1304);
  static const ExceptionsPlatformErrorCodes xblStsExpiredToken = const ExceptionsPlatformErrorCodes._internal(1305);
  static const ExceptionsPlatformErrorCodes xblAccessToTheSandboxDenied = const ExceptionsPlatformErrorCodes._internal(1306);
  static const ExceptionsPlatformErrorCodes xblMsaResponseMissing = const ExceptionsPlatformErrorCodes._internal(1307);
  static const ExceptionsPlatformErrorCodes xblMsaAccessTokenExpired = const ExceptionsPlatformErrorCodes._internal(1308);
  static const ExceptionsPlatformErrorCodes xblMsaInvalidRequest = const ExceptionsPlatformErrorCodes._internal(1309);
  static const ExceptionsPlatformErrorCodes xblMsaFriendsRequireSignIn = const ExceptionsPlatformErrorCodes._internal(1310);
  static const ExceptionsPlatformErrorCodes xblUserActionRequired = const ExceptionsPlatformErrorCodes._internal(1311);
  static const ExceptionsPlatformErrorCodes xblParentalControls = const ExceptionsPlatformErrorCodes._internal(1312);
  static const ExceptionsPlatformErrorCodes xblDeveloperAccount = const ExceptionsPlatformErrorCodes._internal(1313);
  static const ExceptionsPlatformErrorCodes xblUserTokenExpired = const ExceptionsPlatformErrorCodes._internal(1314);
  static const ExceptionsPlatformErrorCodes xblUserTokenInvalid = const ExceptionsPlatformErrorCodes._internal(1315);
  static const ExceptionsPlatformErrorCodes xblOffline = const ExceptionsPlatformErrorCodes._internal(1316);
  static const ExceptionsPlatformErrorCodes xblUnknownErrorCode = const ExceptionsPlatformErrorCodes._internal(1317);
  static const ExceptionsPlatformErrorCodes xblMsaInvalidGrant = const ExceptionsPlatformErrorCodes._internal(1318);
  static const ExceptionsPlatformErrorCodes reportNotYetResolved = const ExceptionsPlatformErrorCodes._internal(1400);
  static const ExceptionsPlatformErrorCodes reportOverturnDoesNotChangeDecision = const ExceptionsPlatformErrorCodes._internal(1401);
  static const ExceptionsPlatformErrorCodes reportNotFound = const ExceptionsPlatformErrorCodes._internal(1402);
  static const ExceptionsPlatformErrorCodes reportAlreadyReported = const ExceptionsPlatformErrorCodes._internal(1403);
  static const ExceptionsPlatformErrorCodes reportInvalidResolution = const ExceptionsPlatformErrorCodes._internal(1404);
  static const ExceptionsPlatformErrorCodes reportNotAssignedToYou = const ExceptionsPlatformErrorCodes._internal(1405);
  static const ExceptionsPlatformErrorCodes legacyGameStatsSystemDisabled = const ExceptionsPlatformErrorCodes._internal(1500);
  static const ExceptionsPlatformErrorCodes legacyGameStatsUnknownError = const ExceptionsPlatformErrorCodes._internal(1501);
  static const ExceptionsPlatformErrorCodes legacyGameStatsMalformedSneakerNetCode = const ExceptionsPlatformErrorCodes._internal(1502);
  static const ExceptionsPlatformErrorCodes destinyAccountAcquisitionFailure = const ExceptionsPlatformErrorCodes._internal(1600);
  static const ExceptionsPlatformErrorCodes destinyAccountNotFound = const ExceptionsPlatformErrorCodes._internal(1601);
  static const ExceptionsPlatformErrorCodes destinyBuildStatsDatabaseError = const ExceptionsPlatformErrorCodes._internal(1602);
  static const ExceptionsPlatformErrorCodes destinyCharacterStatsDatabaseError = const ExceptionsPlatformErrorCodes._internal(1603);
  static const ExceptionsPlatformErrorCodes destinyPvPStatsDatabaseError = const ExceptionsPlatformErrorCodes._internal(1604);
  static const ExceptionsPlatformErrorCodes destinyPvEStatsDatabaseError = const ExceptionsPlatformErrorCodes._internal(1605);
  static const ExceptionsPlatformErrorCodes destinyGrimoireStatsDatabaseError = const ExceptionsPlatformErrorCodes._internal(1606);
  static const ExceptionsPlatformErrorCodes destinyStatsParameterMembershipTypeParseError = const ExceptionsPlatformErrorCodes._internal(1607);
  static const ExceptionsPlatformErrorCodes destinyStatsParameterMembershipIdParseError = const ExceptionsPlatformErrorCodes._internal(1608);
  static const ExceptionsPlatformErrorCodes destinyStatsParameterRangeParseError = const ExceptionsPlatformErrorCodes._internal(1609);
  static const ExceptionsPlatformErrorCodes destinyStringItemHashNotFound = const ExceptionsPlatformErrorCodes._internal(1610);
  static const ExceptionsPlatformErrorCodes destinyStringSetNotFound = const ExceptionsPlatformErrorCodes._internal(1611);
  static const ExceptionsPlatformErrorCodes destinyContentLookupNotFoundForKey = const ExceptionsPlatformErrorCodes._internal(1612);
  static const ExceptionsPlatformErrorCodes destinyContentItemNotFound = const ExceptionsPlatformErrorCodes._internal(1613);
  static const ExceptionsPlatformErrorCodes destinyContentSectionNotFound = const ExceptionsPlatformErrorCodes._internal(1614);
  static const ExceptionsPlatformErrorCodes destinyContentPropertyNotFound = const ExceptionsPlatformErrorCodes._internal(1615);
  static const ExceptionsPlatformErrorCodes destinyContentConfigNotFound = const ExceptionsPlatformErrorCodes._internal(1616);
  static const ExceptionsPlatformErrorCodes destinyContentPropertyBucketValueNotFound = const ExceptionsPlatformErrorCodes._internal(1617);
  static const ExceptionsPlatformErrorCodes destinyUnexpectedError = const ExceptionsPlatformErrorCodes._internal(1618);
  static const ExceptionsPlatformErrorCodes destinyInvalidAction = const ExceptionsPlatformErrorCodes._internal(1619);
  static const ExceptionsPlatformErrorCodes destinyCharacterNotFound = const ExceptionsPlatformErrorCodes._internal(1620);
  static const ExceptionsPlatformErrorCodes destinyInvalidFlag = const ExceptionsPlatformErrorCodes._internal(1621);
  static const ExceptionsPlatformErrorCodes destinyInvalidRequest = const ExceptionsPlatformErrorCodes._internal(1622);
  static const ExceptionsPlatformErrorCodes destinyItemNotFound = const ExceptionsPlatformErrorCodes._internal(1623);
  static const ExceptionsPlatformErrorCodes destinyInvalidCustomizationChoices = const ExceptionsPlatformErrorCodes._internal(1624);
  static const ExceptionsPlatformErrorCodes destinyVendorItemNotFound = const ExceptionsPlatformErrorCodes._internal(1625);
  static const ExceptionsPlatformErrorCodes destinyInternalError = const ExceptionsPlatformErrorCodes._internal(1626);
  static const ExceptionsPlatformErrorCodes destinyVendorNotFound = const ExceptionsPlatformErrorCodes._internal(1627);
  static const ExceptionsPlatformErrorCodes destinyRecentActivitiesDatabaseError = const ExceptionsPlatformErrorCodes._internal(1628);
  static const ExceptionsPlatformErrorCodes destinyItemBucketNotFound = const ExceptionsPlatformErrorCodes._internal(1629);
  static const ExceptionsPlatformErrorCodes destinyInvalidMembershipType = const ExceptionsPlatformErrorCodes._internal(1630);
  static const ExceptionsPlatformErrorCodes destinyVersionIncompatibility = const ExceptionsPlatformErrorCodes._internal(1631);
  static const ExceptionsPlatformErrorCodes destinyItemAlreadyInInventory = const ExceptionsPlatformErrorCodes._internal(1632);
  static const ExceptionsPlatformErrorCodes destinyBucketNotFound = const ExceptionsPlatformErrorCodes._internal(1633);
  /// Note: This is one of those holdovers from Destiny 1. We didn't change the enum because I am lazy, but in Destiny 2 this would read "DestinyCharacterNotInSocialSpace"
  static const ExceptionsPlatformErrorCodes destinyCharacterNotInTower = const ExceptionsPlatformErrorCodes._internal(1634);
  static const ExceptionsPlatformErrorCodes destinyCharacterNotLoggedIn = const ExceptionsPlatformErrorCodes._internal(1635);
  static const ExceptionsPlatformErrorCodes destinyDefinitionsNotLoaded = const ExceptionsPlatformErrorCodes._internal(1636);
  static const ExceptionsPlatformErrorCodes destinyInventoryFull = const ExceptionsPlatformErrorCodes._internal(1637);
  static const ExceptionsPlatformErrorCodes destinyItemFailedLevelCheck = const ExceptionsPlatformErrorCodes._internal(1638);
  static const ExceptionsPlatformErrorCodes destinyItemFailedUnlockCheck = const ExceptionsPlatformErrorCodes._internal(1639);
  static const ExceptionsPlatformErrorCodes destinyItemUnequippable = const ExceptionsPlatformErrorCodes._internal(1640);
  static const ExceptionsPlatformErrorCodes destinyItemUniqueEquipRestricted = const ExceptionsPlatformErrorCodes._internal(1641);
  static const ExceptionsPlatformErrorCodes destinyNoRoomInDestination = const ExceptionsPlatformErrorCodes._internal(1642);
  static const ExceptionsPlatformErrorCodes destinyServiceFailure = const ExceptionsPlatformErrorCodes._internal(1643);
  static const ExceptionsPlatformErrorCodes destinyServiceRetired = const ExceptionsPlatformErrorCodes._internal(1644);
  static const ExceptionsPlatformErrorCodes destinyTransferFailed = const ExceptionsPlatformErrorCodes._internal(1645);
  static const ExceptionsPlatformErrorCodes destinyTransferNotFoundForSourceBucket = const ExceptionsPlatformErrorCodes._internal(1646);
  static const ExceptionsPlatformErrorCodes destinyUnexpectedResultInVendorTransferCheck = const ExceptionsPlatformErrorCodes._internal(1647);
  static const ExceptionsPlatformErrorCodes destinyUniquenessViolation = const ExceptionsPlatformErrorCodes._internal(1648);
  static const ExceptionsPlatformErrorCodes destinyErrorDeserializationFailure = const ExceptionsPlatformErrorCodes._internal(1649);
  static const ExceptionsPlatformErrorCodes destinyValidAccountTicketRequired = const ExceptionsPlatformErrorCodes._internal(1650);
  static const ExceptionsPlatformErrorCodes destinyShardRelayClientTimeout = const ExceptionsPlatformErrorCodes._internal(1651);
  static const ExceptionsPlatformErrorCodes destinyShardRelayProxyTimeout = const ExceptionsPlatformErrorCodes._internal(1652);
  static const ExceptionsPlatformErrorCodes destinyPGCRNotFound = const ExceptionsPlatformErrorCodes._internal(1653);
  static const ExceptionsPlatformErrorCodes destinyAccountMustBeOffline = const ExceptionsPlatformErrorCodes._internal(1654);
  static const ExceptionsPlatformErrorCodes destinyCanOnlyEquipInGame = const ExceptionsPlatformErrorCodes._internal(1655);
  static const ExceptionsPlatformErrorCodes destinyCannotPerformActionOnEquippedItem = const ExceptionsPlatformErrorCodes._internal(1656);
  static const ExceptionsPlatformErrorCodes destinyQuestAlreadyCompleted = const ExceptionsPlatformErrorCodes._internal(1657);
  static const ExceptionsPlatformErrorCodes destinyQuestAlreadyTracked = const ExceptionsPlatformErrorCodes._internal(1658);
  static const ExceptionsPlatformErrorCodes destinyTrackableQuestsFull = const ExceptionsPlatformErrorCodes._internal(1659);
  static const ExceptionsPlatformErrorCodes destinyItemNotTransferrable = const ExceptionsPlatformErrorCodes._internal(1660);
  static const ExceptionsPlatformErrorCodes destinyVendorPurchaseNotAllowed = const ExceptionsPlatformErrorCodes._internal(1661);
  static const ExceptionsPlatformErrorCodes destinyContentVersionMismatch = const ExceptionsPlatformErrorCodes._internal(1662);
  static const ExceptionsPlatformErrorCodes destinyItemActionForbidden = const ExceptionsPlatformErrorCodes._internal(1663);
  static const ExceptionsPlatformErrorCodes destinyRefundInvalid = const ExceptionsPlatformErrorCodes._internal(1664);
  static const ExceptionsPlatformErrorCodes destinyPrivacyRestriction = const ExceptionsPlatformErrorCodes._internal(1665);
  static const ExceptionsPlatformErrorCodes destinyActionInsufficientPrivileges = const ExceptionsPlatformErrorCodes._internal(1666);
  static const ExceptionsPlatformErrorCodes destinyInvalidClaimException = const ExceptionsPlatformErrorCodes._internal(1667);
  static const ExceptionsPlatformErrorCodes destinyLegacyPlatformRestricted = const ExceptionsPlatformErrorCodes._internal(1668);
  static const ExceptionsPlatformErrorCodes destinyLegacyPlatformInUse = const ExceptionsPlatformErrorCodes._internal(1669);
  static const ExceptionsPlatformErrorCodes destinyLegacyPlatformInaccessible = const ExceptionsPlatformErrorCodes._internal(1670);
  static const ExceptionsPlatformErrorCodes destinyCannotPerformActionAtThisLocation = const ExceptionsPlatformErrorCodes._internal(1671);
  static const ExceptionsPlatformErrorCodes destinyThrottledByGameServer = const ExceptionsPlatformErrorCodes._internal(1672);
  static const ExceptionsPlatformErrorCodes destinyItemNotTransferrableHasSideEffects = const ExceptionsPlatformErrorCodes._internal(1673);
  static const ExceptionsPlatformErrorCodes destinyItemLocked = const ExceptionsPlatformErrorCodes._internal(1674);
  static const ExceptionsPlatformErrorCodes destinyCannotAffordMaterialRequirements = const ExceptionsPlatformErrorCodes._internal(1675);
  static const ExceptionsPlatformErrorCodes destinyFailedPlugInsertionRules = const ExceptionsPlatformErrorCodes._internal(1676);
  static const ExceptionsPlatformErrorCodes destinySocketNotFound = const ExceptionsPlatformErrorCodes._internal(1677);
  static const ExceptionsPlatformErrorCodes destinySocketActionNotAllowed = const ExceptionsPlatformErrorCodes._internal(1678);
  static const ExceptionsPlatformErrorCodes destinySocketAlreadyHasPlug = const ExceptionsPlatformErrorCodes._internal(1679);
  static const ExceptionsPlatformErrorCodes destinyPlugItemNotAvailable = const ExceptionsPlatformErrorCodes._internal(1680);
  static const ExceptionsPlatformErrorCodes destinyCharacterLoggedInNotAllowed = const ExceptionsPlatformErrorCodes._internal(1681);
  static const ExceptionsPlatformErrorCodes destinyPublicAccountNotAccessible = const ExceptionsPlatformErrorCodes._internal(1682);
  static const ExceptionsPlatformErrorCodes fbInvalidRequest = const ExceptionsPlatformErrorCodes._internal(1800);
  static const ExceptionsPlatformErrorCodes fbRedirectMismatch = const ExceptionsPlatformErrorCodes._internal(1801);
  static const ExceptionsPlatformErrorCodes fbAccessDenied = const ExceptionsPlatformErrorCodes._internal(1802);
  static const ExceptionsPlatformErrorCodes fbUnsupportedResponseType = const ExceptionsPlatformErrorCodes._internal(1803);
  static const ExceptionsPlatformErrorCodes fbInvalidScope = const ExceptionsPlatformErrorCodes._internal(1804);
  static const ExceptionsPlatformErrorCodes fbUnsupportedGrantType = const ExceptionsPlatformErrorCodes._internal(1805);
  static const ExceptionsPlatformErrorCodes fbInvalidGrant = const ExceptionsPlatformErrorCodes._internal(1806);
  static const ExceptionsPlatformErrorCodes invitationExpired = const ExceptionsPlatformErrorCodes._internal(1900);
  static const ExceptionsPlatformErrorCodes invitationUnknownType = const ExceptionsPlatformErrorCodes._internal(1901);
  static const ExceptionsPlatformErrorCodes invitationInvalidResponseStatus = const ExceptionsPlatformErrorCodes._internal(1902);
  static const ExceptionsPlatformErrorCodes invitationInvalidType = const ExceptionsPlatformErrorCodes._internal(1903);
  static const ExceptionsPlatformErrorCodes invitationAlreadyPending = const ExceptionsPlatformErrorCodes._internal(1904);
  static const ExceptionsPlatformErrorCodes invitationInsufficientPermission = const ExceptionsPlatformErrorCodes._internal(1905);
  static const ExceptionsPlatformErrorCodes invitationInvalidCode = const ExceptionsPlatformErrorCodes._internal(1906);
  static const ExceptionsPlatformErrorCodes invitationInvalidTargetState = const ExceptionsPlatformErrorCodes._internal(1907);
  static const ExceptionsPlatformErrorCodes invitationCannotBeReactivated = const ExceptionsPlatformErrorCodes._internal(1908);
  static const ExceptionsPlatformErrorCodes invitationNoRecipients = const ExceptionsPlatformErrorCodes._internal(1910);
  static const ExceptionsPlatformErrorCodes invitationGroupCannotSendToSelf = const ExceptionsPlatformErrorCodes._internal(1911);
  static const ExceptionsPlatformErrorCodes invitationTooManyRecipients = const ExceptionsPlatformErrorCodes._internal(1912);
  static const ExceptionsPlatformErrorCodes invitationInvalid = const ExceptionsPlatformErrorCodes._internal(1913);
  static const ExceptionsPlatformErrorCodes invitationNotFound = const ExceptionsPlatformErrorCodes._internal(1914);
  static const ExceptionsPlatformErrorCodes tokenInvalid = const ExceptionsPlatformErrorCodes._internal(2000);
  static const ExceptionsPlatformErrorCodes tokenBadFormat = const ExceptionsPlatformErrorCodes._internal(2001);
  static const ExceptionsPlatformErrorCodes tokenAlreadyClaimed = const ExceptionsPlatformErrorCodes._internal(2002);
  static const ExceptionsPlatformErrorCodes tokenAlreadyClaimedSelf = const ExceptionsPlatformErrorCodes._internal(2003);
  static const ExceptionsPlatformErrorCodes tokenThrottling = const ExceptionsPlatformErrorCodes._internal(2004);
  static const ExceptionsPlatformErrorCodes tokenUnknownRedemptionFailure = const ExceptionsPlatformErrorCodes._internal(2005);
  static const ExceptionsPlatformErrorCodes tokenPurchaseClaimFailedAfterTokenClaimed = const ExceptionsPlatformErrorCodes._internal(2006);
  static const ExceptionsPlatformErrorCodes tokenUserAlreadyOwnsOffer = const ExceptionsPlatformErrorCodes._internal(2007);
  static const ExceptionsPlatformErrorCodes tokenInvalidOfferKey = const ExceptionsPlatformErrorCodes._internal(2008);
  static const ExceptionsPlatformErrorCodes tokenEmailNotValidated = const ExceptionsPlatformErrorCodes._internal(2009);
  static const ExceptionsPlatformErrorCodes tokenProvisioningBadVendorOrOffer = const ExceptionsPlatformErrorCodes._internal(2010);
  static const ExceptionsPlatformErrorCodes tokenPurchaseHistoryUnknownError = const ExceptionsPlatformErrorCodes._internal(2011);
  static const ExceptionsPlatformErrorCodes tokenThrottleStateUnknownError = const ExceptionsPlatformErrorCodes._internal(2012);
  static const ExceptionsPlatformErrorCodes tokenUserAgeNotVerified = const ExceptionsPlatformErrorCodes._internal(2013);
  static const ExceptionsPlatformErrorCodes tokenExceededOfferMaximum = const ExceptionsPlatformErrorCodes._internal(2014);
  static const ExceptionsPlatformErrorCodes tokenNoAvailableUnlocks = const ExceptionsPlatformErrorCodes._internal(2015);
  static const ExceptionsPlatformErrorCodes tokenMarketplaceInvalidPlatform = const ExceptionsPlatformErrorCodes._internal(2016);
  static const ExceptionsPlatformErrorCodes tokenNoMarketplaceCodesFound = const ExceptionsPlatformErrorCodes._internal(2017);
  static const ExceptionsPlatformErrorCodes tokenOfferNotAvailableForRedemption = const ExceptionsPlatformErrorCodes._internal(2018);
  static const ExceptionsPlatformErrorCodes tokenUnlockPartialFailure = const ExceptionsPlatformErrorCodes._internal(2019);
  static const ExceptionsPlatformErrorCodes tokenMarketplaceInvalidRegion = const ExceptionsPlatformErrorCodes._internal(2020);
  static const ExceptionsPlatformErrorCodes tokenOfferExpired = const ExceptionsPlatformErrorCodes._internal(2021);
  static const ExceptionsPlatformErrorCodes rAFExceededMaximumReferrals = const ExceptionsPlatformErrorCodes._internal(2022);
  static const ExceptionsPlatformErrorCodes rAFDuplicateBond = const ExceptionsPlatformErrorCodes._internal(2023);
  static const ExceptionsPlatformErrorCodes rAFNoValidVeteranDestinyMembershipsFound = const ExceptionsPlatformErrorCodes._internal(2024);
  static const ExceptionsPlatformErrorCodes rAFNotAValidVeteranUser = const ExceptionsPlatformErrorCodes._internal(2025);
  static const ExceptionsPlatformErrorCodes rAFCodeAlreadyClaimedOrNotFound = const ExceptionsPlatformErrorCodes._internal(2026);
  static const ExceptionsPlatformErrorCodes rAFMismatchedDestinyMembershipType = const ExceptionsPlatformErrorCodes._internal(2027);
  static const ExceptionsPlatformErrorCodes rAFUnableToAccessPurchaseHistory = const ExceptionsPlatformErrorCodes._internal(2028);
  static const ExceptionsPlatformErrorCodes rAFUnableToCreateBond = const ExceptionsPlatformErrorCodes._internal(2029);
  static const ExceptionsPlatformErrorCodes rAFUnableToFindBond = const ExceptionsPlatformErrorCodes._internal(2030);
  static const ExceptionsPlatformErrorCodes rAFUnableToRemoveBond = const ExceptionsPlatformErrorCodes._internal(2031);
  static const ExceptionsPlatformErrorCodes rAFCannotBondToSelf = const ExceptionsPlatformErrorCodes._internal(2032);
  static const ExceptionsPlatformErrorCodes rAFInvalidPlatform = const ExceptionsPlatformErrorCodes._internal(2033);
  static const ExceptionsPlatformErrorCodes rAFGenerateThrottled = const ExceptionsPlatformErrorCodes._internal(2034);
  static const ExceptionsPlatformErrorCodes rAFUnableToCreateBondVersionMismatch = const ExceptionsPlatformErrorCodes._internal(2035);
  static const ExceptionsPlatformErrorCodes rAFUnableToRemoveBondVersionMismatch = const ExceptionsPlatformErrorCodes._internal(2036);
  static const ExceptionsPlatformErrorCodes rAFRedeemThrottled = const ExceptionsPlatformErrorCodes._internal(2037);
  static const ExceptionsPlatformErrorCodes noAvailableDiscountCode = const ExceptionsPlatformErrorCodes._internal(2038);
  static const ExceptionsPlatformErrorCodes discountAlreadyClaimed = const ExceptionsPlatformErrorCodes._internal(2039);
  static const ExceptionsPlatformErrorCodes discountClaimFailure = const ExceptionsPlatformErrorCodes._internal(2040);
  static const ExceptionsPlatformErrorCodes discountConfigurationFailure = const ExceptionsPlatformErrorCodes._internal(2041);
  static const ExceptionsPlatformErrorCodes discountGenerationFailure = const ExceptionsPlatformErrorCodes._internal(2042);
  static const ExceptionsPlatformErrorCodes discountAlreadyExists = const ExceptionsPlatformErrorCodes._internal(2043);
  static const ExceptionsPlatformErrorCodes tokenRequiresCredentialXuid = const ExceptionsPlatformErrorCodes._internal(2044);
  static const ExceptionsPlatformErrorCodes tokenRequiresCredentialPsnid = const ExceptionsPlatformErrorCodes._internal(2045);
  static const ExceptionsPlatformErrorCodes offerRequired = const ExceptionsPlatformErrorCodes._internal(2046);
  static const ExceptionsPlatformErrorCodes unknownEververseHistoryError = const ExceptionsPlatformErrorCodes._internal(2047);
  static const ExceptionsPlatformErrorCodes missingEververseHistoryError = const ExceptionsPlatformErrorCodes._internal(2048);
  static const ExceptionsPlatformErrorCodes bungieRewardEmailStateInvalid = const ExceptionsPlatformErrorCodes._internal(2049);
  static const ExceptionsPlatformErrorCodes bungieRewardNotYetClaimable = const ExceptionsPlatformErrorCodes._internal(2050);
  static const ExceptionsPlatformErrorCodes apiExceededMaxKeys = const ExceptionsPlatformErrorCodes._internal(2100);
  static const ExceptionsPlatformErrorCodes apiInvalidOrExpiredKey = const ExceptionsPlatformErrorCodes._internal(2101);
  static const ExceptionsPlatformErrorCodes apiKeyMissingFromRequest = const ExceptionsPlatformErrorCodes._internal(2102);
  static const ExceptionsPlatformErrorCodes applicationDisabled = const ExceptionsPlatformErrorCodes._internal(2103);
  static const ExceptionsPlatformErrorCodes applicationExceededMax = const ExceptionsPlatformErrorCodes._internal(2104);
  static const ExceptionsPlatformErrorCodes applicationDisallowedByScope = const ExceptionsPlatformErrorCodes._internal(2105);
  static const ExceptionsPlatformErrorCodes authorizationCodeInvalid = const ExceptionsPlatformErrorCodes._internal(2106);
  static const ExceptionsPlatformErrorCodes originHeaderDoesNotMatchKey = const ExceptionsPlatformErrorCodes._internal(2107);
  static const ExceptionsPlatformErrorCodes accessNotPermittedByApplicationScope = const ExceptionsPlatformErrorCodes._internal(2108);
  static const ExceptionsPlatformErrorCodes applicationNameIsTaken = const ExceptionsPlatformErrorCodes._internal(2109);
  static const ExceptionsPlatformErrorCodes refreshTokenNotYetValid = const ExceptionsPlatformErrorCodes._internal(2110);
  static const ExceptionsPlatformErrorCodes accessTokenHasExpired = const ExceptionsPlatformErrorCodes._internal(2111);
  static const ExceptionsPlatformErrorCodes applicationTokenFormatNotValid = const ExceptionsPlatformErrorCodes._internal(2112);
  static const ExceptionsPlatformErrorCodes applicationNotConfiguredForBungieAuth = const ExceptionsPlatformErrorCodes._internal(2113);
  static const ExceptionsPlatformErrorCodes applicationNotConfiguredForOAuth = const ExceptionsPlatformErrorCodes._internal(2114);
  static const ExceptionsPlatformErrorCodes oAuthAccessTokenExpired = const ExceptionsPlatformErrorCodes._internal(2115);
  static const ExceptionsPlatformErrorCodes partnershipInvalidType = const ExceptionsPlatformErrorCodes._internal(2200);
  static const ExceptionsPlatformErrorCodes partnershipValidationError = const ExceptionsPlatformErrorCodes._internal(2201);
  static const ExceptionsPlatformErrorCodes partnershipValidationTimeout = const ExceptionsPlatformErrorCodes._internal(2202);
  static const ExceptionsPlatformErrorCodes partnershipAccessFailure = const ExceptionsPlatformErrorCodes._internal(2203);
  static const ExceptionsPlatformErrorCodes partnershipAccountInvalid = const ExceptionsPlatformErrorCodes._internal(2204);
  static const ExceptionsPlatformErrorCodes partnershipGetAccountInfoFailure = const ExceptionsPlatformErrorCodes._internal(2205);
  static const ExceptionsPlatformErrorCodes partnershipDisabled = const ExceptionsPlatformErrorCodes._internal(2206);
  static const ExceptionsPlatformErrorCodes partnershipAlreadyExists = const ExceptionsPlatformErrorCodes._internal(2207);
  static const ExceptionsPlatformErrorCodes communityStreamingUnavailable = const ExceptionsPlatformErrorCodes._internal(2300);
  static const ExceptionsPlatformErrorCodes twitchNotLinked = const ExceptionsPlatformErrorCodes._internal(2500);
  static const ExceptionsPlatformErrorCodes twitchAccountNotFound = const ExceptionsPlatformErrorCodes._internal(2501);
  static const ExceptionsPlatformErrorCodes twitchCouldNotLoadDestinyInfo = const ExceptionsPlatformErrorCodes._internal(2502);
  static const ExceptionsPlatformErrorCodes trendingCategoryNotFound = const ExceptionsPlatformErrorCodes._internal(2600);
  static const ExceptionsPlatformErrorCodes trendingEntryTypeNotSupported = const ExceptionsPlatformErrorCodes._internal(2601);
  static const ExceptionsPlatformErrorCodes reportOffenderNotInPgcr = const ExceptionsPlatformErrorCodes._internal(2700);
  static const ExceptionsPlatformErrorCodes reportRequestorNotInPgcr = const ExceptionsPlatformErrorCodes._internal(2701);
  static const ExceptionsPlatformErrorCodes reportSubmissionFailed = const ExceptionsPlatformErrorCodes._internal(2702);
  static const ExceptionsPlatformErrorCodes reportCannotReportSelf = const ExceptionsPlatformErrorCodes._internal(2703);
  static const ExceptionsPlatformErrorCodes awaTypeDisabled = const ExceptionsPlatformErrorCodes._internal(2800);
  static const ExceptionsPlatformErrorCodes awaTooManyPendingRequests = const ExceptionsPlatformErrorCodes._internal(2801);
  static const ExceptionsPlatformErrorCodes awaTheFeatureRequiresARegisteredDevice = const ExceptionsPlatformErrorCodes._internal(2802);
  static const ExceptionsPlatformErrorCodes awaRequestWasUnansweredForTooLong = const ExceptionsPlatformErrorCodes._internal(2803);
  static const ExceptionsPlatformErrorCodes awaWriteRequestMissingOrInvalidToken = const ExceptionsPlatformErrorCodes._internal(2804);
  static const ExceptionsPlatformErrorCodes awaWriteRequestTokenExpired = const ExceptionsPlatformErrorCodes._internal(2805);
  static const ExceptionsPlatformErrorCodes awaWriteRequestTokenUsageLimitReached = const ExceptionsPlatformErrorCodes._internal(2806);
  static const ExceptionsPlatformErrorCodes clanFireteamNotFound = const ExceptionsPlatformErrorCodes._internal(3000);
  static const ExceptionsPlatformErrorCodes clanFireteamAddNoAlternatesForImmediate = const ExceptionsPlatformErrorCodes._internal(3001);
  static const ExceptionsPlatformErrorCodes clanFireteamFull = const ExceptionsPlatformErrorCodes._internal(3002);
  static const ExceptionsPlatformErrorCodes clanFireteamAltFull = const ExceptionsPlatformErrorCodes._internal(3003);
  static const ExceptionsPlatformErrorCodes clanFireteamBlocked = const ExceptionsPlatformErrorCodes._internal(3004);
  static const ExceptionsPlatformErrorCodes clanFireteamPlayerEntryNotFound = const ExceptionsPlatformErrorCodes._internal(3005);
  static const ExceptionsPlatformErrorCodes clanFireteamPermissions = const ExceptionsPlatformErrorCodes._internal(3006);
  static const ExceptionsPlatformErrorCodes clanFireteamInvalidPlatform = const ExceptionsPlatformErrorCodes._internal(3007);
  static const ExceptionsPlatformErrorCodes clanFireteamCannotAdjustSlotCount = const ExceptionsPlatformErrorCodes._internal(3008);
  static const ExceptionsPlatformErrorCodes clanFireteamInvalidPlayerPlatform = const ExceptionsPlatformErrorCodes._internal(3009);
  static const ExceptionsPlatformErrorCodes clanFireteamNotReadyForInvitesNotEnoughPlayers = const ExceptionsPlatformErrorCodes._internal(3010);
  static const ExceptionsPlatformErrorCodes clanFireteamGameInvitesNotSupportForPlatform = const ExceptionsPlatformErrorCodes._internal(3011);
  static const ExceptionsPlatformErrorCodes clanFireteamPlatformInvitePreqFailure = const ExceptionsPlatformErrorCodes._internal(3012);
  static const ExceptionsPlatformErrorCodes clanFireteamInvalidAuthContext = const ExceptionsPlatformErrorCodes._internal(3013);
  static const ExceptionsPlatformErrorCodes clanFireteamInvalidAuthProviderPsn = const ExceptionsPlatformErrorCodes._internal(3014);
  static const ExceptionsPlatformErrorCodes clanFireteamPs4SessionFull = const ExceptionsPlatformErrorCodes._internal(3015);
  static const ExceptionsPlatformErrorCodes clanFireteamInvalidAuthToken = const ExceptionsPlatformErrorCodes._internal(3016);
  static const ExceptionsPlatformErrorCodes clanFireteamScheduledFireteamsDisabled = const ExceptionsPlatformErrorCodes._internal(3017);
  static const ExceptionsPlatformErrorCodes clanFireteamNotReadyForInvitesNotScheduledYet = const ExceptionsPlatformErrorCodes._internal(3018);
  static const ExceptionsPlatformErrorCodes clanFireteamNotReadyForInvitesClosed = const ExceptionsPlatformErrorCodes._internal(3019);
  static const ExceptionsPlatformErrorCodes clanFireteamScheduledFireteamsRequireAdminPermissions = const ExceptionsPlatformErrorCodes._internal(3020);
  static const ExceptionsPlatformErrorCodes clanFireteamNonPublicMustHaveClan = const ExceptionsPlatformErrorCodes._internal(3021);
  static const ExceptionsPlatformErrorCodes clanFireteamPublicCreationRestriction = const ExceptionsPlatformErrorCodes._internal(3022);
  static const ExceptionsPlatformErrorCodes clanFireteamAlreadyJoined = const ExceptionsPlatformErrorCodes._internal(3023);
  static const ExceptionsPlatformErrorCodes clanFireteamScheduledFireteamsRange = const ExceptionsPlatformErrorCodes._internal(3024);
  static const ExceptionsPlatformErrorCodes clanFireteamPublicCreationRestrictionExtended = const ExceptionsPlatformErrorCodes._internal(3025);
}

class ExceptionsPlatformErrorCodesTypeTransformer extends TypeTransformer<ExceptionsPlatformErrorCodes> {

  @override
  dynamic encode(ExceptionsPlatformErrorCodes data) {
    return data.value;
  }

  @override
  ExceptionsPlatformErrorCodes decode(dynamic data) {
    switch (data) {
      case 0: return ExceptionsPlatformErrorCodes.none;
      case 1: return ExceptionsPlatformErrorCodes.success;
      case 2: return ExceptionsPlatformErrorCodes.transportException;
      case 3: return ExceptionsPlatformErrorCodes.unhandledException;
      case 4: return ExceptionsPlatformErrorCodes.notImplemented;
      case 5: return ExceptionsPlatformErrorCodes.systemDisabled;
      case 6: return ExceptionsPlatformErrorCodes.failedToLoadAvailableLocalesConfiguration;
      case 7: return ExceptionsPlatformErrorCodes.parameterParseFailure;
      case 8: return ExceptionsPlatformErrorCodes.parameterInvalidRange;
      case 9: return ExceptionsPlatformErrorCodes.badRequest;
      case 10: return ExceptionsPlatformErrorCodes.authenticationInvalid;
      case 11: return ExceptionsPlatformErrorCodes.dataNotFound;
      case 12: return ExceptionsPlatformErrorCodes.insufficientPrivileges;
      case 13: return ExceptionsPlatformErrorCodes.duplicate;
      case 14: return ExceptionsPlatformErrorCodes.unknownSqlResult;
      case 15: return ExceptionsPlatformErrorCodes.validationError;
      case 16: return ExceptionsPlatformErrorCodes.validationMissingFieldError;
      case 17: return ExceptionsPlatformErrorCodes.validationInvalidInputError;
      case 18: return ExceptionsPlatformErrorCodes.invalidParameters;
      case 19: return ExceptionsPlatformErrorCodes.parameterNotFound;
      case 20: return ExceptionsPlatformErrorCodes.unhandledHttpException;
      case 21: return ExceptionsPlatformErrorCodes.notFound;
      case 22: return ExceptionsPlatformErrorCodes.webAuthModuleAsyncFailed;
      case 23: return ExceptionsPlatformErrorCodes.invalidReturnValue;
      case 24: return ExceptionsPlatformErrorCodes.userBanned;
      case 25: return ExceptionsPlatformErrorCodes.invalidPostBody;
      case 26: return ExceptionsPlatformErrorCodes.missingPostBody;
      case 27: return ExceptionsPlatformErrorCodes.externalServiceTimeout;
      case 28: return ExceptionsPlatformErrorCodes.validationLengthError;
      case 29: return ExceptionsPlatformErrorCodes.validationRangeError;
      case 30: return ExceptionsPlatformErrorCodes.jsonDeserializationError;
      case 31: return ExceptionsPlatformErrorCodes.throttleLimitExceeded;
      case 32: return ExceptionsPlatformErrorCodes.validationTagError;
      case 33: return ExceptionsPlatformErrorCodes.validationProfanityError;
      case 34: return ExceptionsPlatformErrorCodes.validationUrlFormatError;
      case 35: return ExceptionsPlatformErrorCodes.throttleLimitExceededMinutes;
      case 36: return ExceptionsPlatformErrorCodes.throttleLimitExceededMomentarily;
      case 37: return ExceptionsPlatformErrorCodes.throttleLimitExceededSeconds;
      case 38: return ExceptionsPlatformErrorCodes.externalServiceUnknown;
      case 39: return ExceptionsPlatformErrorCodes.validationWordLengthError;
      case 40: return ExceptionsPlatformErrorCodes.validationInvisibleUnicode;
      case 41: return ExceptionsPlatformErrorCodes.validationBadNames;
      case 42: return ExceptionsPlatformErrorCodes.externalServiceFailed;
      case 43: return ExceptionsPlatformErrorCodes.serviceRetired;
      case 44: return ExceptionsPlatformErrorCodes.unknownSqlException;
      case 45: return ExceptionsPlatformErrorCodes.unsupportedLocale;
      case 46: return ExceptionsPlatformErrorCodes.invalidPageNumber;
      case 47: return ExceptionsPlatformErrorCodes.maximumPageSizeExceeded;
      case 48: return ExceptionsPlatformErrorCodes.serviceUnsupported;
      case 49: return ExceptionsPlatformErrorCodes.validationMaximumUnicodeCombiningCharacters;
      case 50: return ExceptionsPlatformErrorCodes.validationMaximumSequentialCarriageReturns;
      case 51: return ExceptionsPlatformErrorCodes.perEndpointRequestThrottleExceeded;
      case 52: return ExceptionsPlatformErrorCodes.authContextCacheAssertion;
      case 53: return ExceptionsPlatformErrorCodes.exPlatformStringValidationError;
      case 89: return ExceptionsPlatformErrorCodes.obsoleteCredentialType;
      case 90: return ExceptionsPlatformErrorCodes.unableToUnPairMobileApp;
      case 91: return ExceptionsPlatformErrorCodes.unableToPairMobileApp;
      case 92: return ExceptionsPlatformErrorCodes.cannotUseMobileAuthWithNonMobileProvider;
      case 93: return ExceptionsPlatformErrorCodes.missingDeviceCookie;
      case 94: return ExceptionsPlatformErrorCodes.facebookTokenExpired;
      case 95: return ExceptionsPlatformErrorCodes.authTicketRequired;
      case 96: return ExceptionsPlatformErrorCodes.cookieContextRequired;
      case 97: return ExceptionsPlatformErrorCodes.unknownAuthenticationError;
      case 98: return ExceptionsPlatformErrorCodes.bungieNetAccountCreationRequired;
      case 99: return ExceptionsPlatformErrorCodes.webAuthRequired;
      case 100: return ExceptionsPlatformErrorCodes.contentUnknownSqlResult;
      case 101: return ExceptionsPlatformErrorCodes.contentNeedUniquePath;
      case 102: return ExceptionsPlatformErrorCodes.contentSqlException;
      case 103: return ExceptionsPlatformErrorCodes.contentNotFound;
      case 104: return ExceptionsPlatformErrorCodes.contentSuccessWithTagAddFail;
      case 105: return ExceptionsPlatformErrorCodes.contentSearchMissingParameters;
      case 106: return ExceptionsPlatformErrorCodes.contentInvalidId;
      case 107: return ExceptionsPlatformErrorCodes.contentPhysicalFileDeletionError;
      case 108: return ExceptionsPlatformErrorCodes.contentPhysicalFileCreationError;
      case 109: return ExceptionsPlatformErrorCodes.contentPerforceSubmissionError;
      case 110: return ExceptionsPlatformErrorCodes.contentPerforceInitializationError;
      case 111: return ExceptionsPlatformErrorCodes.contentDeploymentPackageNotReadyError;
      case 112: return ExceptionsPlatformErrorCodes.contentUploadFailed;
      case 113: return ExceptionsPlatformErrorCodes.contentTooManyResults;
      case 115: return ExceptionsPlatformErrorCodes.contentInvalidState;
      case 116: return ExceptionsPlatformErrorCodes.contentNavigationParentNotFound;
      case 117: return ExceptionsPlatformErrorCodes.contentNavigationParentUpdateError;
      case 118: return ExceptionsPlatformErrorCodes.deploymentPackageNotEditable;
      case 119: return ExceptionsPlatformErrorCodes.contentValidationError;
      case 120: return ExceptionsPlatformErrorCodes.contentPropertiesValidationError;
      case 121: return ExceptionsPlatformErrorCodes.contentTypeNotFound;
      case 122: return ExceptionsPlatformErrorCodes.deploymentPackageNotFound;
      case 123: return ExceptionsPlatformErrorCodes.contentSearchInvalidParameters;
      case 124: return ExceptionsPlatformErrorCodes.contentItemPropertyAggregationError;
      case 125: return ExceptionsPlatformErrorCodes.deploymentPackageFileNotFound;
      case 126: return ExceptionsPlatformErrorCodes.contentPerforceFileHistoryNotFound;
      case 127: return ExceptionsPlatformErrorCodes.contentAssetZipCreationFailure;
      case 128: return ExceptionsPlatformErrorCodes.contentAssetZipCreationBusy;
      case 129: return ExceptionsPlatformErrorCodes.contentProjectNotFound;
      case 130: return ExceptionsPlatformErrorCodes.contentFolderNotFound;
      case 131: return ExceptionsPlatformErrorCodes.contentPackagesInconsistent;
      case 132: return ExceptionsPlatformErrorCodes.contentPackagesInvalidState;
      case 133: return ExceptionsPlatformErrorCodes.contentPackagesInconsistentType;
      case 134: return ExceptionsPlatformErrorCodes.contentCannotDeletePackage;
      case 135: return ExceptionsPlatformErrorCodes.contentLockedForChanges;
      case 136: return ExceptionsPlatformErrorCodes.contentFileUploadFailed;
      case 137: return ExceptionsPlatformErrorCodes.contentNotReviewed;
      case 138: return ExceptionsPlatformErrorCodes.contentPermissionDenied;
      case 139: return ExceptionsPlatformErrorCodes.contentInvalidExternalUrl;
      case 140: return ExceptionsPlatformErrorCodes.contentExternalFileCannotBeImportedLocally;
      case 141: return ExceptionsPlatformErrorCodes.contentTagSaveFailure;
      case 142: return ExceptionsPlatformErrorCodes.contentPerforceUnmatchedFileError;
      case 143: return ExceptionsPlatformErrorCodes.contentPerforceChangelistResultNotFound;
      case 144: return ExceptionsPlatformErrorCodes.contentPerforceChangelistFileItemsNotFound;
      case 145: return ExceptionsPlatformErrorCodes.contentPerforceInvalidRevisionError;
      case 146: return ExceptionsPlatformErrorCodes.contentUnloadedSaveResult;
      case 147: return ExceptionsPlatformErrorCodes.contentPropertyInvalidNumber;
      case 148: return ExceptionsPlatformErrorCodes.contentPropertyInvalidUrl;
      case 149: return ExceptionsPlatformErrorCodes.contentPropertyInvalidDate;
      case 150: return ExceptionsPlatformErrorCodes.contentPropertyInvalidSet;
      case 151: return ExceptionsPlatformErrorCodes.contentPropertyCannotDeserialize;
      case 152: return ExceptionsPlatformErrorCodes.contentRegexValidationFailOnProperty;
      case 153: return ExceptionsPlatformErrorCodes.contentMaxLengthFailOnProperty;
      case 154: return ExceptionsPlatformErrorCodes.contentPropertyUnexpectedDeserializationError;
      case 155: return ExceptionsPlatformErrorCodes.contentPropertyRequired;
      case 156: return ExceptionsPlatformErrorCodes.contentCannotCreateFile;
      case 157: return ExceptionsPlatformErrorCodes.contentInvalidMigrationFile;
      case 158: return ExceptionsPlatformErrorCodes.contentMigrationAlteringProcessedItem;
      case 159: return ExceptionsPlatformErrorCodes.contentPropertyDefinitionNotFound;
      case 160: return ExceptionsPlatformErrorCodes.contentReviewDataChanged;
      case 161: return ExceptionsPlatformErrorCodes.contentRollbackRevisionNotInPackage;
      case 162: return ExceptionsPlatformErrorCodes.contentItemNotBasedOnLatestRevision;
      case 163: return ExceptionsPlatformErrorCodes.contentUnauthorized;
      case 164: return ExceptionsPlatformErrorCodes.contentCannotCreateDeploymentPackage;
      case 165: return ExceptionsPlatformErrorCodes.contentUserNotFound;
      case 166: return ExceptionsPlatformErrorCodes.contentLocalePermissionDenied;
      case 167: return ExceptionsPlatformErrorCodes.contentInvalidLinkToInternalEnvironment;
      case 168: return ExceptionsPlatformErrorCodes.contentInvalidBlacklistedContent;
      case 169: return ExceptionsPlatformErrorCodes.contentMacroMalformedNoContentId;
      case 170: return ExceptionsPlatformErrorCodes.contentMacroMalformedNoTemplateType;
      case 171: return ExceptionsPlatformErrorCodes.contentIllegalBNetMembershipId;
      case 172: return ExceptionsPlatformErrorCodes.contentLocaleDidNotMatchExpected;
      case 173: return ExceptionsPlatformErrorCodes.contentBabelCallFailed;
      case 174: return ExceptionsPlatformErrorCodes.contentEnglishPostLiveForbidden;
      case 175: return ExceptionsPlatformErrorCodes.contentLocaleEditPermissionDenied;
      case 200: return ExceptionsPlatformErrorCodes.userNonUniqueName;
      case 201: return ExceptionsPlatformErrorCodes.userManualLinkingStepRequired;
      case 202: return ExceptionsPlatformErrorCodes.userCreateUnknownSqlResult;
      case 203: return ExceptionsPlatformErrorCodes.userCreateUnknownSqlException;
      case 204: return ExceptionsPlatformErrorCodes.userMalformedMembershipId;
      case 205: return ExceptionsPlatformErrorCodes.userCannotFindRequestedUser;
      case 206: return ExceptionsPlatformErrorCodes.userCannotLoadAccountCredentialLinkInfo;
      case 207: return ExceptionsPlatformErrorCodes.userInvalidMobileAppType;
      case 208: return ExceptionsPlatformErrorCodes.userMissingMobilePairingInfo;
      case 209: return ExceptionsPlatformErrorCodes.userCannotGenerateMobileKeyWhileUsingMobileCredential;
      case 210: return ExceptionsPlatformErrorCodes.userGenerateMobileKeyExistingSlotCollision;
      case 211: return ExceptionsPlatformErrorCodes.userDisplayNameMissingOrInvalid;
      case 212: return ExceptionsPlatformErrorCodes.userCannotLoadAccountProfileData;
      case 213: return ExceptionsPlatformErrorCodes.userCannotSaveUserProfileData;
      case 214: return ExceptionsPlatformErrorCodes.userEmailMissingOrInvalid;
      case 215: return ExceptionsPlatformErrorCodes.userTermsOfUseRequired;
      case 216: return ExceptionsPlatformErrorCodes.userCannotCreateNewAccountWhileLoggedIn;
      case 217: return ExceptionsPlatformErrorCodes.userCannotResolveCentralAccount;
      case 218: return ExceptionsPlatformErrorCodes.userInvalidAvatar;
      case 219: return ExceptionsPlatformErrorCodes.userMissingCreatedUserResult;
      case 220: return ExceptionsPlatformErrorCodes.userCannotChangeUniqueNameYet;
      case 221: return ExceptionsPlatformErrorCodes.userCannotChangeDisplayNameYet;
      case 222: return ExceptionsPlatformErrorCodes.userCannotChangeEmail;
      case 223: return ExceptionsPlatformErrorCodes.userUniqueNameMustStartWithLetter;
      case 224: return ExceptionsPlatformErrorCodes.userNoLinkedAccountsSupportFriendListings;
      case 225: return ExceptionsPlatformErrorCodes.userAcknowledgmentTableFull;
      case 226: return ExceptionsPlatformErrorCodes.userCreationDestinyMembershipRequired;
      case 227: return ExceptionsPlatformErrorCodes.userFriendsTokenNeedsRefresh;
      case 300: return ExceptionsPlatformErrorCodes.messagingUnknownError;
      case 301: return ExceptionsPlatformErrorCodes.messagingSelfError;
      case 302: return ExceptionsPlatformErrorCodes.messagingSendThrottle;
      case 303: return ExceptionsPlatformErrorCodes.messagingNoBody;
      case 304: return ExceptionsPlatformErrorCodes.messagingTooManyUsers;
      case 305: return ExceptionsPlatformErrorCodes.messagingCanNotLeaveConversation;
      case 306: return ExceptionsPlatformErrorCodes.messagingUnableToSend;
      case 307: return ExceptionsPlatformErrorCodes.messagingDeletedUserForbidden;
      case 308: return ExceptionsPlatformErrorCodes.messagingCannotDeleteExternalConversation;
      case 309: return ExceptionsPlatformErrorCodes.messagingGroupChatDisabled;
      case 310: return ExceptionsPlatformErrorCodes.messagingMustIncludeSelfInPrivateMessage;
      case 311: return ExceptionsPlatformErrorCodes.messagingSenderIsBanned;
      case 312: return ExceptionsPlatformErrorCodes.messagingGroupOptionalChatExceededMaximum;
      case 313: return ExceptionsPlatformErrorCodes.privateMessagingRequiresDestinyMembership;
      case 400: return ExceptionsPlatformErrorCodes.addSurveyAnswersUnknownSqlException;
      case 500: return ExceptionsPlatformErrorCodes.forumBodyCannotBeEmpty;
      case 501: return ExceptionsPlatformErrorCodes.forumSubjectCannotBeEmptyOnTopicPost;
      case 502: return ExceptionsPlatformErrorCodes.forumCannotLocateParentPost;
      case 503: return ExceptionsPlatformErrorCodes.forumThreadLockedForReplies;
      case 504: return ExceptionsPlatformErrorCodes.forumUnknownSqlResultDuringCreatePost;
      case 505: return ExceptionsPlatformErrorCodes.forumUnknownTagCreationError;
      case 506: return ExceptionsPlatformErrorCodes.forumUnknownSqlResultDuringTagItem;
      case 507: return ExceptionsPlatformErrorCodes.forumUnknownExceptionCreatePost;
      case 508: return ExceptionsPlatformErrorCodes.forumQuestionMustBeTopicPost;
      case 509: return ExceptionsPlatformErrorCodes.forumExceptionDuringTagSearch;
      case 510: return ExceptionsPlatformErrorCodes.forumExceptionDuringTopicRetrieval;
      case 511: return ExceptionsPlatformErrorCodes.forumAliasedTagError;
      case 512: return ExceptionsPlatformErrorCodes.forumCannotLocateThread;
      case 513: return ExceptionsPlatformErrorCodes.forumUnknownExceptionEditPost;
      case 514: return ExceptionsPlatformErrorCodes.forumCannotLocatePost;
      case 515: return ExceptionsPlatformErrorCodes.forumUnknownExceptionGetOrCreateTags;
      case 516: return ExceptionsPlatformErrorCodes.forumEditPermissionDenied;
      case 517: return ExceptionsPlatformErrorCodes.forumUnknownSqlResultDuringTagIdRetrieval;
      case 518: return ExceptionsPlatformErrorCodes.forumCannotGetRating;
      case 519: return ExceptionsPlatformErrorCodes.forumUnknownExceptionGetRating;
      case 520: return ExceptionsPlatformErrorCodes.forumRatingsAccessError;
      case 521: return ExceptionsPlatformErrorCodes.forumRelatedPostAccessError;
      case 522: return ExceptionsPlatformErrorCodes.forumLatestReplyAccessError;
      case 523: return ExceptionsPlatformErrorCodes.forumUserStatusAccessError;
      case 524: return ExceptionsPlatformErrorCodes.forumAuthorAccessError;
      case 525: return ExceptionsPlatformErrorCodes.forumGroupAccessError;
      case 526: return ExceptionsPlatformErrorCodes.forumUrlExpectedButMissing;
      case 527: return ExceptionsPlatformErrorCodes.forumRepliesCannotBeEmpty;
      case 528: return ExceptionsPlatformErrorCodes.forumRepliesCannotBeInDifferentGroups;
      case 529: return ExceptionsPlatformErrorCodes.forumSubTopicCannotBeCreatedAtThisThreadLevel;
      case 530: return ExceptionsPlatformErrorCodes.forumCannotCreateContentTopic;
      case 531: return ExceptionsPlatformErrorCodes.forumTopicDoesNotExist;
      case 532: return ExceptionsPlatformErrorCodes.forumContentCommentsNotAllowed;
      case 533: return ExceptionsPlatformErrorCodes.forumUnknownSqlResultDuringEditPost;
      case 534: return ExceptionsPlatformErrorCodes.forumUnknownSqlResultDuringGetPost;
      case 535: return ExceptionsPlatformErrorCodes.forumPostValidationBadUrl;
      case 536: return ExceptionsPlatformErrorCodes.forumBodyTooLong;
      case 537: return ExceptionsPlatformErrorCodes.forumSubjectTooLong;
      case 538: return ExceptionsPlatformErrorCodes.forumAnnouncementNotAllowed;
      case 539: return ExceptionsPlatformErrorCodes.forumCannotShareOwnPost;
      case 540: return ExceptionsPlatformErrorCodes.forumEditNoOp;
      case 541: return ExceptionsPlatformErrorCodes.forumUnknownDatabaseErrorDuringGetPost;
      case 542: return ExceptionsPlatformErrorCodes.forumExceeedMaximumRowLimit;
      case 543: return ExceptionsPlatformErrorCodes.forumCannotSharePrivatePost;
      case 544: return ExceptionsPlatformErrorCodes.forumCannotCrossPostBetweenGroups;
      case 555: return ExceptionsPlatformErrorCodes.forumIncompatibleCategories;
      case 556: return ExceptionsPlatformErrorCodes.forumCannotUseTheseCategoriesOnNonTopicPost;
      case 557: return ExceptionsPlatformErrorCodes.forumCanOnlyDeleteTopics;
      case 558: return ExceptionsPlatformErrorCodes.forumDeleteSqlException;
      case 559: return ExceptionsPlatformErrorCodes.forumDeleteSqlUnknownResult;
      case 560: return ExceptionsPlatformErrorCodes.forumTooManyTags;
      case 561: return ExceptionsPlatformErrorCodes.forumCanOnlyRateTopics;
      case 562: return ExceptionsPlatformErrorCodes.forumBannedPostsCannotBeEdited;
      case 563: return ExceptionsPlatformErrorCodes.forumThreadRootIsBanned;
      case 564: return ExceptionsPlatformErrorCodes.forumCannotUseOfficialTagCategoryAsTag;
      case 565: return ExceptionsPlatformErrorCodes.forumAnswerCannotBeMadeOnCreatePost;
      case 566: return ExceptionsPlatformErrorCodes.forumAnswerCannotBeMadeOnEditPost;
      case 567: return ExceptionsPlatformErrorCodes.forumAnswerPostIdIsNotADirectReplyOfQuestion;
      case 568: return ExceptionsPlatformErrorCodes.forumAnswerTopicIdIsNotAQuestion;
      case 569: return ExceptionsPlatformErrorCodes.forumUnknownExceptionDuringMarkAnswer;
      case 570: return ExceptionsPlatformErrorCodes.forumUnknownSqlResultDuringMarkAnswer;
      case 571: return ExceptionsPlatformErrorCodes.forumCannotRateYourOwnPosts;
      case 572: return ExceptionsPlatformErrorCodes.forumPollsMustBeTheFirstPostInTopic;
      case 573: return ExceptionsPlatformErrorCodes.forumInvalidPollInput;
      case 574: return ExceptionsPlatformErrorCodes.forumGroupAdminEditNonMember;
      case 575: return ExceptionsPlatformErrorCodes.forumCannotEditModeratorEditedPost;
      case 576: return ExceptionsPlatformErrorCodes.forumRequiresDestinyMembership;
      case 577: return ExceptionsPlatformErrorCodes.forumUnexpectedError;
      case 578: return ExceptionsPlatformErrorCodes.forumAgeLock;
      case 579: return ExceptionsPlatformErrorCodes.forumMaxPages;
      case 580: return ExceptionsPlatformErrorCodes.forumMaxPagesOldestFirst;
      case 581: return ExceptionsPlatformErrorCodes.forumCannotApplyForumIdWithoutTags;
      case 582: return ExceptionsPlatformErrorCodes.forumCannotApplyForumIdToNonTopics;
      case 583: return ExceptionsPlatformErrorCodes.forumCannotDownvoteCommunityCreations;
      case 584: return ExceptionsPlatformErrorCodes.forumTopicsMustHaveOfficialCategory;
      case 585: return ExceptionsPlatformErrorCodes.forumRecruitmentTopicMalformed;
      case 586: return ExceptionsPlatformErrorCodes.forumRecruitmentTopicNotFound;
      case 587: return ExceptionsPlatformErrorCodes.forumRecruitmentTopicNoSlotsRemaining;
      case 588: return ExceptionsPlatformErrorCodes.forumRecruitmentTopicKickBan;
      case 589: return ExceptionsPlatformErrorCodes.forumRecruitmentTopicRequirementsNotMet;
      case 590: return ExceptionsPlatformErrorCodes.forumRecruitmentTopicNoPlayers;
      case 591: return ExceptionsPlatformErrorCodes.forumRecruitmentApproveFailMessageBan;
      case 592: return ExceptionsPlatformErrorCodes.forumRecruitmentGlobalBan;
      case 593: return ExceptionsPlatformErrorCodes.forumUserBannedFromThisTopic;
      case 594: return ExceptionsPlatformErrorCodes.forumRecruitmentFireteamMembersOnly;
      case 595: return ExceptionsPlatformErrorCodes.forumRequiresDestiny2Progress;
      case 601: return ExceptionsPlatformErrorCodes.groupMembershipApplicationAlreadyResolved;
      case 602: return ExceptionsPlatformErrorCodes.groupMembershipAlreadyApplied;
      case 603: return ExceptionsPlatformErrorCodes.groupMembershipInsufficientPrivileges;
      case 604: return ExceptionsPlatformErrorCodes.groupIdNotReturnedFromCreation;
      case 605: return ExceptionsPlatformErrorCodes.groupSearchInvalidParameters;
      case 606: return ExceptionsPlatformErrorCodes.groupMembershipPendingApplicationNotFound;
      case 607: return ExceptionsPlatformErrorCodes.groupInvalidId;
      case 608: return ExceptionsPlatformErrorCodes.groupInvalidMembershipId;
      case 609: return ExceptionsPlatformErrorCodes.groupInvalidMembershipType;
      case 610: return ExceptionsPlatformErrorCodes.groupMissingTags;
      case 611: return ExceptionsPlatformErrorCodes.groupMembershipNotFound;
      case 612: return ExceptionsPlatformErrorCodes.groupInvalidRating;
      case 613: return ExceptionsPlatformErrorCodes.groupUserFollowingAccessError;
      case 614: return ExceptionsPlatformErrorCodes.groupUserMembershipAccessError;
      case 615: return ExceptionsPlatformErrorCodes.groupCreatorAccessError;
      case 616: return ExceptionsPlatformErrorCodes.groupAdminAccessError;
      case 617: return ExceptionsPlatformErrorCodes.groupPrivatePostNotViewable;
      case 618: return ExceptionsPlatformErrorCodes.groupMembershipNotLoggedIn;
      case 619: return ExceptionsPlatformErrorCodes.groupNotDeleted;
      case 620: return ExceptionsPlatformErrorCodes.groupUnknownErrorUndeletingGroup;
      case 621: return ExceptionsPlatformErrorCodes.groupDeleted;
      case 622: return ExceptionsPlatformErrorCodes.groupNotFound;
      case 623: return ExceptionsPlatformErrorCodes.groupMemberBanned;
      case 624: return ExceptionsPlatformErrorCodes.groupMembershipClosed;
      case 625: return ExceptionsPlatformErrorCodes.groupPrivatePostOverrideError;
      case 626: return ExceptionsPlatformErrorCodes.groupNameTaken;
      case 627: return ExceptionsPlatformErrorCodes.groupDeletionGracePeriodExpired;
      case 628: return ExceptionsPlatformErrorCodes.groupCannotCheckBanStatus;
      case 629: return ExceptionsPlatformErrorCodes.groupMaximumMembershipCountReached;
      case 630: return ExceptionsPlatformErrorCodes.noDestinyAccountForClanPlatform;
      case 631: return ExceptionsPlatformErrorCodes.alreadyRequestingMembershipForClanPlatform;
      case 632: return ExceptionsPlatformErrorCodes.alreadyClanMemberOnPlatform;
      case 633: return ExceptionsPlatformErrorCodes.groupJoinedCannotSetClanName;
      case 634: return ExceptionsPlatformErrorCodes.groupLeftCannotClearClanName;
      case 635: return ExceptionsPlatformErrorCodes.groupRelationshipRequestPending;
      case 636: return ExceptionsPlatformErrorCodes.groupRelationshipRequestBlocked;
      case 637: return ExceptionsPlatformErrorCodes.groupRelationshipRequestNotFound;
      case 638: return ExceptionsPlatformErrorCodes.groupRelationshipBlockNotFound;
      case 639: return ExceptionsPlatformErrorCodes.groupRelationshipNotFound;
      case 641: return ExceptionsPlatformErrorCodes.groupAlreadyAllied;
      case 642: return ExceptionsPlatformErrorCodes.groupAlreadyMember;
      case 643: return ExceptionsPlatformErrorCodes.groupRelationshipAlreadyExists;
      case 644: return ExceptionsPlatformErrorCodes.invalidGroupTypesForRelationshipRequest;
      case 646: return ExceptionsPlatformErrorCodes.groupAtMaximumAlliances;
      case 647: return ExceptionsPlatformErrorCodes.groupCannotSetClanOnlySettings;
      case 648: return ExceptionsPlatformErrorCodes.clanCannotSetTwoDefaultPostTypes;
      case 649: return ExceptionsPlatformErrorCodes.groupMemberInvalidMemberType;
      case 650: return ExceptionsPlatformErrorCodes.groupInvalidPlatformType;
      case 651: return ExceptionsPlatformErrorCodes.groupMemberInvalidSort;
      case 652: return ExceptionsPlatformErrorCodes.groupInvalidResolveState;
      case 653: return ExceptionsPlatformErrorCodes.clanAlreadyEnabledForPlatform;
      case 654: return ExceptionsPlatformErrorCodes.clanNotEnabledForPlatform;
      case 655: return ExceptionsPlatformErrorCodes.clanEnabledButCouldNotJoinNoAccount;
      case 656: return ExceptionsPlatformErrorCodes.clanEnabledButCouldNotJoinAlreadyMember;
      case 657: return ExceptionsPlatformErrorCodes.clanCannotJoinNoCredential;
      case 658: return ExceptionsPlatformErrorCodes.noClanMembershipForPlatform;
      case 659: return ExceptionsPlatformErrorCodes.groupToGroupFollowLimitReached;
      case 660: return ExceptionsPlatformErrorCodes.childGroupAlreadyInAlliance;
      case 661: return ExceptionsPlatformErrorCodes.ownerGroupAlreadyInAlliance;
      case 662: return ExceptionsPlatformErrorCodes.allianceOwnerCannotJoinAlliance;
      case 663: return ExceptionsPlatformErrorCodes.groupNotInAlliance;
      case 664: return ExceptionsPlatformErrorCodes.childGroupCannotInviteToAlliance;
      case 665: return ExceptionsPlatformErrorCodes.groupToGroupAlreadyFollowed;
      case 666: return ExceptionsPlatformErrorCodes.groupToGroupNotFollowing;
      case 667: return ExceptionsPlatformErrorCodes.clanMaximumMembershipReached;
      case 668: return ExceptionsPlatformErrorCodes.clanNameNotValid;
      case 669: return ExceptionsPlatformErrorCodes.clanNameNotValidError;
      case 670: return ExceptionsPlatformErrorCodes.allianceOwnerNotDefined;
      case 671: return ExceptionsPlatformErrorCodes.allianceChildNotDefined;
      case 672: return ExceptionsPlatformErrorCodes.clanCultureIllegalCharacters;
      case 673: return ExceptionsPlatformErrorCodes.clanTagIllegalCharacters;
      case 674: return ExceptionsPlatformErrorCodes.clanRequiresInvitation;
      case 675: return ExceptionsPlatformErrorCodes.clanMembershipClosed;
      case 676: return ExceptionsPlatformErrorCodes.clanInviteAlreadyMember;
      case 677: return ExceptionsPlatformErrorCodes.groupInviteAlreadyMember;
      case 678: return ExceptionsPlatformErrorCodes.groupJoinApprovalRequired;
      case 679: return ExceptionsPlatformErrorCodes.clanTagRequired;
      case 680: return ExceptionsPlatformErrorCodes.groupNameCannotStartOrEndWithWhiteSpace;
      case 681: return ExceptionsPlatformErrorCodes.clanCallsignCannotStartOrEndWithWhiteSpace;
      case 682: return ExceptionsPlatformErrorCodes.clanMigrationFailed;
      case 683: return ExceptionsPlatformErrorCodes.clanNotEnabledAlreadyMemberOfAnotherClan;
      case 684: return ExceptionsPlatformErrorCodes.groupModerationNotPermittedOnNonMembers;
      case 685: return ExceptionsPlatformErrorCodes.clanCreationInWorldServerFailed;
      case 686: return ExceptionsPlatformErrorCodes.clanNotFound;
      case 687: return ExceptionsPlatformErrorCodes.clanMembershipLevelDoesNotPermitThatAction;
      case 688: return ExceptionsPlatformErrorCodes.clanMemberNotFound;
      case 689: return ExceptionsPlatformErrorCodes.clanMissingMembershipApprovers;
      case 690: return ExceptionsPlatformErrorCodes.clanInWrongStateForRequestedAction;
      case 691: return ExceptionsPlatformErrorCodes.clanNameAlreadyUsed;
      case 692: return ExceptionsPlatformErrorCodes.clanTooFewMembers;
      case 693: return ExceptionsPlatformErrorCodes.clanInfoCannotBeWhitespace;
      case 694: return ExceptionsPlatformErrorCodes.groupCultureThrottle;
      case 695: return ExceptionsPlatformErrorCodes.clanTargetDisallowsInvites;
      case 696: return ExceptionsPlatformErrorCodes.clanInvalidOperation;
      case 697: return ExceptionsPlatformErrorCodes.clanFounderCannotLeaveWithoutAbdication;
      case 698: return ExceptionsPlatformErrorCodes.clanNameReserved;
      case 699: return ExceptionsPlatformErrorCodes.clanApplicantInClanSoNowInvited;
      case 701: return ExceptionsPlatformErrorCodes.activitiesUnknownException;
      case 702: return ExceptionsPlatformErrorCodes.activitiesParameterNull;
      case 703: return ExceptionsPlatformErrorCodes.activityCountsDiabled;
      case 704: return ExceptionsPlatformErrorCodes.activitySearchInvalidParameters;
      case 705: return ExceptionsPlatformErrorCodes.activityPermissionDenied;
      case 706: return ExceptionsPlatformErrorCodes.shareAlreadyShared;
      case 707: return ExceptionsPlatformErrorCodes.activityLoggingDisabled;
      case 750: return ExceptionsPlatformErrorCodes.clanRequiresExistingDestinyAccount;
      case 801: return ExceptionsPlatformErrorCodes.itemAlreadyFollowed;
      case 802: return ExceptionsPlatformErrorCodes.itemNotFollowed;
      case 803: return ExceptionsPlatformErrorCodes.cannotFollowSelf;
      case 804: return ExceptionsPlatformErrorCodes.groupFollowLimitExceeded;
      case 805: return ExceptionsPlatformErrorCodes.tagFollowLimitExceeded;
      case 806: return ExceptionsPlatformErrorCodes.userFollowLimitExceeded;
      case 807: return ExceptionsPlatformErrorCodes.followUnsupportedEntityType;
      case 900: return ExceptionsPlatformErrorCodes.noValidTagsInList;
      case 901: return ExceptionsPlatformErrorCodes.belowMinimumSuggestionLength;
      case 902: return ExceptionsPlatformErrorCodes.cannotGetSuggestionsOnMultipleTagsSimultaneously;
      case 903: return ExceptionsPlatformErrorCodes.notAValidPartialTag;
      case 904: return ExceptionsPlatformErrorCodes.tagSuggestionsUnknownSqlResult;
      case 905: return ExceptionsPlatformErrorCodes.tagsUnableToLoadPopularTagsFromDatabase;
      case 906: return ExceptionsPlatformErrorCodes.tagInvalid;
      case 907: return ExceptionsPlatformErrorCodes.tagNotFound;
      case 908: return ExceptionsPlatformErrorCodes.singleTagExpected;
      case 909: return ExceptionsPlatformErrorCodes.tagsExceededMaximumPerItem;
      case 1000: return ExceptionsPlatformErrorCodes.ignoreInvalidParameters;
      case 1001: return ExceptionsPlatformErrorCodes.ignoreSqlException;
      case 1002: return ExceptionsPlatformErrorCodes.ignoreErrorRetrievingGroupPermissions;
      case 1003: return ExceptionsPlatformErrorCodes.ignoreErrorInsufficientPermission;
      case 1004: return ExceptionsPlatformErrorCodes.ignoreErrorRetrievingItem;
      case 1005: return ExceptionsPlatformErrorCodes.ignoreCannotIgnoreSelf;
      case 1006: return ExceptionsPlatformErrorCodes.ignoreIllegalType;
      case 1007: return ExceptionsPlatformErrorCodes.ignoreNotFound;
      case 1008: return ExceptionsPlatformErrorCodes.ignoreUserGloballyIgnored;
      case 1009: return ExceptionsPlatformErrorCodes.ignoreUserIgnored;
      case 1100: return ExceptionsPlatformErrorCodes.notificationSettingInvalid;
      case 1204: return ExceptionsPlatformErrorCodes.psnApiExpiredAccessToken;
      case 1205: return ExceptionsPlatformErrorCodes.pSNExForbidden;
      case 1218: return ExceptionsPlatformErrorCodes.pSNExSystemDisabled;
      case 1223: return ExceptionsPlatformErrorCodes.psnApiErrorCodeUnknown;
      case 1224: return ExceptionsPlatformErrorCodes.psnApiErrorWebException;
      case 1225: return ExceptionsPlatformErrorCodes.psnApiBadRequest;
      case 1226: return ExceptionsPlatformErrorCodes.psnApiAccessTokenRequired;
      case 1227: return ExceptionsPlatformErrorCodes.psnApiInvalidAccessToken;
      case 1229: return ExceptionsPlatformErrorCodes.psnApiBannedUser;
      case 1230: return ExceptionsPlatformErrorCodes.psnApiAccountUpgradeRequired;
      case 1231: return ExceptionsPlatformErrorCodes.psnApiServiceTemporarilyUnavailable;
      case 1232: return ExceptionsPlatformErrorCodes.psnApiServerBusy;
      case 1233: return ExceptionsPlatformErrorCodes.psnApiUnderMaintenance;
      case 1234: return ExceptionsPlatformErrorCodes.psnApiProfileUserNotFound;
      case 1235: return ExceptionsPlatformErrorCodes.psnApiProfilePrivacyRestriction;
      case 1236: return ExceptionsPlatformErrorCodes.psnApiProfileUnderMaintenance;
      case 1237: return ExceptionsPlatformErrorCodes.psnApiAccountAttributeMissing;
      case 1238: return ExceptionsPlatformErrorCodes.psnApiNoPermission;
      case 1239: return ExceptionsPlatformErrorCodes.psnApiTargetUserBlocked;
      case 1300: return ExceptionsPlatformErrorCodes.xblExSystemDisabled;
      case 1301: return ExceptionsPlatformErrorCodes.xblExUnknownError;
      case 1302: return ExceptionsPlatformErrorCodes.xblApiErrorWebException;
      case 1303: return ExceptionsPlatformErrorCodes.xblStsTokenInvalid;
      case 1304: return ExceptionsPlatformErrorCodes.xblStsMissingToken;
      case 1305: return ExceptionsPlatformErrorCodes.xblStsExpiredToken;
      case 1306: return ExceptionsPlatformErrorCodes.xblAccessToTheSandboxDenied;
      case 1307: return ExceptionsPlatformErrorCodes.xblMsaResponseMissing;
      case 1308: return ExceptionsPlatformErrorCodes.xblMsaAccessTokenExpired;
      case 1309: return ExceptionsPlatformErrorCodes.xblMsaInvalidRequest;
      case 1310: return ExceptionsPlatformErrorCodes.xblMsaFriendsRequireSignIn;
      case 1311: return ExceptionsPlatformErrorCodes.xblUserActionRequired;
      case 1312: return ExceptionsPlatformErrorCodes.xblParentalControls;
      case 1313: return ExceptionsPlatformErrorCodes.xblDeveloperAccount;
      case 1314: return ExceptionsPlatformErrorCodes.xblUserTokenExpired;
      case 1315: return ExceptionsPlatformErrorCodes.xblUserTokenInvalid;
      case 1316: return ExceptionsPlatformErrorCodes.xblOffline;
      case 1317: return ExceptionsPlatformErrorCodes.xblUnknownErrorCode;
      case 1318: return ExceptionsPlatformErrorCodes.xblMsaInvalidGrant;
      case 1400: return ExceptionsPlatformErrorCodes.reportNotYetResolved;
      case 1401: return ExceptionsPlatformErrorCodes.reportOverturnDoesNotChangeDecision;
      case 1402: return ExceptionsPlatformErrorCodes.reportNotFound;
      case 1403: return ExceptionsPlatformErrorCodes.reportAlreadyReported;
      case 1404: return ExceptionsPlatformErrorCodes.reportInvalidResolution;
      case 1405: return ExceptionsPlatformErrorCodes.reportNotAssignedToYou;
      case 1500: return ExceptionsPlatformErrorCodes.legacyGameStatsSystemDisabled;
      case 1501: return ExceptionsPlatformErrorCodes.legacyGameStatsUnknownError;
      case 1502: return ExceptionsPlatformErrorCodes.legacyGameStatsMalformedSneakerNetCode;
      case 1600: return ExceptionsPlatformErrorCodes.destinyAccountAcquisitionFailure;
      case 1601: return ExceptionsPlatformErrorCodes.destinyAccountNotFound;
      case 1602: return ExceptionsPlatformErrorCodes.destinyBuildStatsDatabaseError;
      case 1603: return ExceptionsPlatformErrorCodes.destinyCharacterStatsDatabaseError;
      case 1604: return ExceptionsPlatformErrorCodes.destinyPvPStatsDatabaseError;
      case 1605: return ExceptionsPlatformErrorCodes.destinyPvEStatsDatabaseError;
      case 1606: return ExceptionsPlatformErrorCodes.destinyGrimoireStatsDatabaseError;
      case 1607: return ExceptionsPlatformErrorCodes.destinyStatsParameterMembershipTypeParseError;
      case 1608: return ExceptionsPlatformErrorCodes.destinyStatsParameterMembershipIdParseError;
      case 1609: return ExceptionsPlatformErrorCodes.destinyStatsParameterRangeParseError;
      case 1610: return ExceptionsPlatformErrorCodes.destinyStringItemHashNotFound;
      case 1611: return ExceptionsPlatformErrorCodes.destinyStringSetNotFound;
      case 1612: return ExceptionsPlatformErrorCodes.destinyContentLookupNotFoundForKey;
      case 1613: return ExceptionsPlatformErrorCodes.destinyContentItemNotFound;
      case 1614: return ExceptionsPlatformErrorCodes.destinyContentSectionNotFound;
      case 1615: return ExceptionsPlatformErrorCodes.destinyContentPropertyNotFound;
      case 1616: return ExceptionsPlatformErrorCodes.destinyContentConfigNotFound;
      case 1617: return ExceptionsPlatformErrorCodes.destinyContentPropertyBucketValueNotFound;
      case 1618: return ExceptionsPlatformErrorCodes.destinyUnexpectedError;
      case 1619: return ExceptionsPlatformErrorCodes.destinyInvalidAction;
      case 1620: return ExceptionsPlatformErrorCodes.destinyCharacterNotFound;
      case 1621: return ExceptionsPlatformErrorCodes.destinyInvalidFlag;
      case 1622: return ExceptionsPlatformErrorCodes.destinyInvalidRequest;
      case 1623: return ExceptionsPlatformErrorCodes.destinyItemNotFound;
      case 1624: return ExceptionsPlatformErrorCodes.destinyInvalidCustomizationChoices;
      case 1625: return ExceptionsPlatformErrorCodes.destinyVendorItemNotFound;
      case 1626: return ExceptionsPlatformErrorCodes.destinyInternalError;
      case 1627: return ExceptionsPlatformErrorCodes.destinyVendorNotFound;
      case 1628: return ExceptionsPlatformErrorCodes.destinyRecentActivitiesDatabaseError;
      case 1629: return ExceptionsPlatformErrorCodes.destinyItemBucketNotFound;
      case 1630: return ExceptionsPlatformErrorCodes.destinyInvalidMembershipType;
      case 1631: return ExceptionsPlatformErrorCodes.destinyVersionIncompatibility;
      case 1632: return ExceptionsPlatformErrorCodes.destinyItemAlreadyInInventory;
      case 1633: return ExceptionsPlatformErrorCodes.destinyBucketNotFound;
      case 1634: return ExceptionsPlatformErrorCodes.destinyCharacterNotInTower;
      case 1635: return ExceptionsPlatformErrorCodes.destinyCharacterNotLoggedIn;
      case 1636: return ExceptionsPlatformErrorCodes.destinyDefinitionsNotLoaded;
      case 1637: return ExceptionsPlatformErrorCodes.destinyInventoryFull;
      case 1638: return ExceptionsPlatformErrorCodes.destinyItemFailedLevelCheck;
      case 1639: return ExceptionsPlatformErrorCodes.destinyItemFailedUnlockCheck;
      case 1640: return ExceptionsPlatformErrorCodes.destinyItemUnequippable;
      case 1641: return ExceptionsPlatformErrorCodes.destinyItemUniqueEquipRestricted;
      case 1642: return ExceptionsPlatformErrorCodes.destinyNoRoomInDestination;
      case 1643: return ExceptionsPlatformErrorCodes.destinyServiceFailure;
      case 1644: return ExceptionsPlatformErrorCodes.destinyServiceRetired;
      case 1645: return ExceptionsPlatformErrorCodes.destinyTransferFailed;
      case 1646: return ExceptionsPlatformErrorCodes.destinyTransferNotFoundForSourceBucket;
      case 1647: return ExceptionsPlatformErrorCodes.destinyUnexpectedResultInVendorTransferCheck;
      case 1648: return ExceptionsPlatformErrorCodes.destinyUniquenessViolation;
      case 1649: return ExceptionsPlatformErrorCodes.destinyErrorDeserializationFailure;
      case 1650: return ExceptionsPlatformErrorCodes.destinyValidAccountTicketRequired;
      case 1651: return ExceptionsPlatformErrorCodes.destinyShardRelayClientTimeout;
      case 1652: return ExceptionsPlatformErrorCodes.destinyShardRelayProxyTimeout;
      case 1653: return ExceptionsPlatformErrorCodes.destinyPGCRNotFound;
      case 1654: return ExceptionsPlatformErrorCodes.destinyAccountMustBeOffline;
      case 1655: return ExceptionsPlatformErrorCodes.destinyCanOnlyEquipInGame;
      case 1656: return ExceptionsPlatformErrorCodes.destinyCannotPerformActionOnEquippedItem;
      case 1657: return ExceptionsPlatformErrorCodes.destinyQuestAlreadyCompleted;
      case 1658: return ExceptionsPlatformErrorCodes.destinyQuestAlreadyTracked;
      case 1659: return ExceptionsPlatformErrorCodes.destinyTrackableQuestsFull;
      case 1660: return ExceptionsPlatformErrorCodes.destinyItemNotTransferrable;
      case 1661: return ExceptionsPlatformErrorCodes.destinyVendorPurchaseNotAllowed;
      case 1662: return ExceptionsPlatformErrorCodes.destinyContentVersionMismatch;
      case 1663: return ExceptionsPlatformErrorCodes.destinyItemActionForbidden;
      case 1664: return ExceptionsPlatformErrorCodes.destinyRefundInvalid;
      case 1665: return ExceptionsPlatformErrorCodes.destinyPrivacyRestriction;
      case 1666: return ExceptionsPlatformErrorCodes.destinyActionInsufficientPrivileges;
      case 1667: return ExceptionsPlatformErrorCodes.destinyInvalidClaimException;
      case 1668: return ExceptionsPlatformErrorCodes.destinyLegacyPlatformRestricted;
      case 1669: return ExceptionsPlatformErrorCodes.destinyLegacyPlatformInUse;
      case 1670: return ExceptionsPlatformErrorCodes.destinyLegacyPlatformInaccessible;
      case 1671: return ExceptionsPlatformErrorCodes.destinyCannotPerformActionAtThisLocation;
      case 1672: return ExceptionsPlatformErrorCodes.destinyThrottledByGameServer;
      case 1673: return ExceptionsPlatformErrorCodes.destinyItemNotTransferrableHasSideEffects;
      case 1674: return ExceptionsPlatformErrorCodes.destinyItemLocked;
      case 1675: return ExceptionsPlatformErrorCodes.destinyCannotAffordMaterialRequirements;
      case 1676: return ExceptionsPlatformErrorCodes.destinyFailedPlugInsertionRules;
      case 1677: return ExceptionsPlatformErrorCodes.destinySocketNotFound;
      case 1678: return ExceptionsPlatformErrorCodes.destinySocketActionNotAllowed;
      case 1679: return ExceptionsPlatformErrorCodes.destinySocketAlreadyHasPlug;
      case 1680: return ExceptionsPlatformErrorCodes.destinyPlugItemNotAvailable;
      case 1681: return ExceptionsPlatformErrorCodes.destinyCharacterLoggedInNotAllowed;
      case 1682: return ExceptionsPlatformErrorCodes.destinyPublicAccountNotAccessible;
      case 1800: return ExceptionsPlatformErrorCodes.fbInvalidRequest;
      case 1801: return ExceptionsPlatformErrorCodes.fbRedirectMismatch;
      case 1802: return ExceptionsPlatformErrorCodes.fbAccessDenied;
      case 1803: return ExceptionsPlatformErrorCodes.fbUnsupportedResponseType;
      case 1804: return ExceptionsPlatformErrorCodes.fbInvalidScope;
      case 1805: return ExceptionsPlatformErrorCodes.fbUnsupportedGrantType;
      case 1806: return ExceptionsPlatformErrorCodes.fbInvalidGrant;
      case 1900: return ExceptionsPlatformErrorCodes.invitationExpired;
      case 1901: return ExceptionsPlatformErrorCodes.invitationUnknownType;
      case 1902: return ExceptionsPlatformErrorCodes.invitationInvalidResponseStatus;
      case 1903: return ExceptionsPlatformErrorCodes.invitationInvalidType;
      case 1904: return ExceptionsPlatformErrorCodes.invitationAlreadyPending;
      case 1905: return ExceptionsPlatformErrorCodes.invitationInsufficientPermission;
      case 1906: return ExceptionsPlatformErrorCodes.invitationInvalidCode;
      case 1907: return ExceptionsPlatformErrorCodes.invitationInvalidTargetState;
      case 1908: return ExceptionsPlatformErrorCodes.invitationCannotBeReactivated;
      case 1910: return ExceptionsPlatformErrorCodes.invitationNoRecipients;
      case 1911: return ExceptionsPlatformErrorCodes.invitationGroupCannotSendToSelf;
      case 1912: return ExceptionsPlatformErrorCodes.invitationTooManyRecipients;
      case 1913: return ExceptionsPlatformErrorCodes.invitationInvalid;
      case 1914: return ExceptionsPlatformErrorCodes.invitationNotFound;
      case 2000: return ExceptionsPlatformErrorCodes.tokenInvalid;
      case 2001: return ExceptionsPlatformErrorCodes.tokenBadFormat;
      case 2002: return ExceptionsPlatformErrorCodes.tokenAlreadyClaimed;
      case 2003: return ExceptionsPlatformErrorCodes.tokenAlreadyClaimedSelf;
      case 2004: return ExceptionsPlatformErrorCodes.tokenThrottling;
      case 2005: return ExceptionsPlatformErrorCodes.tokenUnknownRedemptionFailure;
      case 2006: return ExceptionsPlatformErrorCodes.tokenPurchaseClaimFailedAfterTokenClaimed;
      case 2007: return ExceptionsPlatformErrorCodes.tokenUserAlreadyOwnsOffer;
      case 2008: return ExceptionsPlatformErrorCodes.tokenInvalidOfferKey;
      case 2009: return ExceptionsPlatformErrorCodes.tokenEmailNotValidated;
      case 2010: return ExceptionsPlatformErrorCodes.tokenProvisioningBadVendorOrOffer;
      case 2011: return ExceptionsPlatformErrorCodes.tokenPurchaseHistoryUnknownError;
      case 2012: return ExceptionsPlatformErrorCodes.tokenThrottleStateUnknownError;
      case 2013: return ExceptionsPlatformErrorCodes.tokenUserAgeNotVerified;
      case 2014: return ExceptionsPlatformErrorCodes.tokenExceededOfferMaximum;
      case 2015: return ExceptionsPlatformErrorCodes.tokenNoAvailableUnlocks;
      case 2016: return ExceptionsPlatformErrorCodes.tokenMarketplaceInvalidPlatform;
      case 2017: return ExceptionsPlatformErrorCodes.tokenNoMarketplaceCodesFound;
      case 2018: return ExceptionsPlatformErrorCodes.tokenOfferNotAvailableForRedemption;
      case 2019: return ExceptionsPlatformErrorCodes.tokenUnlockPartialFailure;
      case 2020: return ExceptionsPlatformErrorCodes.tokenMarketplaceInvalidRegion;
      case 2021: return ExceptionsPlatformErrorCodes.tokenOfferExpired;
      case 2022: return ExceptionsPlatformErrorCodes.rAFExceededMaximumReferrals;
      case 2023: return ExceptionsPlatformErrorCodes.rAFDuplicateBond;
      case 2024: return ExceptionsPlatformErrorCodes.rAFNoValidVeteranDestinyMembershipsFound;
      case 2025: return ExceptionsPlatformErrorCodes.rAFNotAValidVeteranUser;
      case 2026: return ExceptionsPlatformErrorCodes.rAFCodeAlreadyClaimedOrNotFound;
      case 2027: return ExceptionsPlatformErrorCodes.rAFMismatchedDestinyMembershipType;
      case 2028: return ExceptionsPlatformErrorCodes.rAFUnableToAccessPurchaseHistory;
      case 2029: return ExceptionsPlatformErrorCodes.rAFUnableToCreateBond;
      case 2030: return ExceptionsPlatformErrorCodes.rAFUnableToFindBond;
      case 2031: return ExceptionsPlatformErrorCodes.rAFUnableToRemoveBond;
      case 2032: return ExceptionsPlatformErrorCodes.rAFCannotBondToSelf;
      case 2033: return ExceptionsPlatformErrorCodes.rAFInvalidPlatform;
      case 2034: return ExceptionsPlatformErrorCodes.rAFGenerateThrottled;
      case 2035: return ExceptionsPlatformErrorCodes.rAFUnableToCreateBondVersionMismatch;
      case 2036: return ExceptionsPlatformErrorCodes.rAFUnableToRemoveBondVersionMismatch;
      case 2037: return ExceptionsPlatformErrorCodes.rAFRedeemThrottled;
      case 2038: return ExceptionsPlatformErrorCodes.noAvailableDiscountCode;
      case 2039: return ExceptionsPlatformErrorCodes.discountAlreadyClaimed;
      case 2040: return ExceptionsPlatformErrorCodes.discountClaimFailure;
      case 2041: return ExceptionsPlatformErrorCodes.discountConfigurationFailure;
      case 2042: return ExceptionsPlatformErrorCodes.discountGenerationFailure;
      case 2043: return ExceptionsPlatformErrorCodes.discountAlreadyExists;
      case 2044: return ExceptionsPlatformErrorCodes.tokenRequiresCredentialXuid;
      case 2045: return ExceptionsPlatformErrorCodes.tokenRequiresCredentialPsnid;
      case 2046: return ExceptionsPlatformErrorCodes.offerRequired;
      case 2047: return ExceptionsPlatformErrorCodes.unknownEververseHistoryError;
      case 2048: return ExceptionsPlatformErrorCodes.missingEververseHistoryError;
      case 2049: return ExceptionsPlatformErrorCodes.bungieRewardEmailStateInvalid;
      case 2050: return ExceptionsPlatformErrorCodes.bungieRewardNotYetClaimable;
      case 2100: return ExceptionsPlatformErrorCodes.apiExceededMaxKeys;
      case 2101: return ExceptionsPlatformErrorCodes.apiInvalidOrExpiredKey;
      case 2102: return ExceptionsPlatformErrorCodes.apiKeyMissingFromRequest;
      case 2103: return ExceptionsPlatformErrorCodes.applicationDisabled;
      case 2104: return ExceptionsPlatformErrorCodes.applicationExceededMax;
      case 2105: return ExceptionsPlatformErrorCodes.applicationDisallowedByScope;
      case 2106: return ExceptionsPlatformErrorCodes.authorizationCodeInvalid;
      case 2107: return ExceptionsPlatformErrorCodes.originHeaderDoesNotMatchKey;
      case 2108: return ExceptionsPlatformErrorCodes.accessNotPermittedByApplicationScope;
      case 2109: return ExceptionsPlatformErrorCodes.applicationNameIsTaken;
      case 2110: return ExceptionsPlatformErrorCodes.refreshTokenNotYetValid;
      case 2111: return ExceptionsPlatformErrorCodes.accessTokenHasExpired;
      case 2112: return ExceptionsPlatformErrorCodes.applicationTokenFormatNotValid;
      case 2113: return ExceptionsPlatformErrorCodes.applicationNotConfiguredForBungieAuth;
      case 2114: return ExceptionsPlatformErrorCodes.applicationNotConfiguredForOAuth;
      case 2115: return ExceptionsPlatformErrorCodes.oAuthAccessTokenExpired;
      case 2200: return ExceptionsPlatformErrorCodes.partnershipInvalidType;
      case 2201: return ExceptionsPlatformErrorCodes.partnershipValidationError;
      case 2202: return ExceptionsPlatformErrorCodes.partnershipValidationTimeout;
      case 2203: return ExceptionsPlatformErrorCodes.partnershipAccessFailure;
      case 2204: return ExceptionsPlatformErrorCodes.partnershipAccountInvalid;
      case 2205: return ExceptionsPlatformErrorCodes.partnershipGetAccountInfoFailure;
      case 2206: return ExceptionsPlatformErrorCodes.partnershipDisabled;
      case 2207: return ExceptionsPlatformErrorCodes.partnershipAlreadyExists;
      case 2300: return ExceptionsPlatformErrorCodes.communityStreamingUnavailable;
      case 2500: return ExceptionsPlatformErrorCodes.twitchNotLinked;
      case 2501: return ExceptionsPlatformErrorCodes.twitchAccountNotFound;
      case 2502: return ExceptionsPlatformErrorCodes.twitchCouldNotLoadDestinyInfo;
      case 2600: return ExceptionsPlatformErrorCodes.trendingCategoryNotFound;
      case 2601: return ExceptionsPlatformErrorCodes.trendingEntryTypeNotSupported;
      case 2700: return ExceptionsPlatformErrorCodes.reportOffenderNotInPgcr;
      case 2701: return ExceptionsPlatformErrorCodes.reportRequestorNotInPgcr;
      case 2702: return ExceptionsPlatformErrorCodes.reportSubmissionFailed;
      case 2703: return ExceptionsPlatformErrorCodes.reportCannotReportSelf;
      case 2800: return ExceptionsPlatformErrorCodes.awaTypeDisabled;
      case 2801: return ExceptionsPlatformErrorCodes.awaTooManyPendingRequests;
      case 2802: return ExceptionsPlatformErrorCodes.awaTheFeatureRequiresARegisteredDevice;
      case 2803: return ExceptionsPlatformErrorCodes.awaRequestWasUnansweredForTooLong;
      case 2804: return ExceptionsPlatformErrorCodes.awaWriteRequestMissingOrInvalidToken;
      case 2805: return ExceptionsPlatformErrorCodes.awaWriteRequestTokenExpired;
      case 2806: return ExceptionsPlatformErrorCodes.awaWriteRequestTokenUsageLimitReached;
      case 3000: return ExceptionsPlatformErrorCodes.clanFireteamNotFound;
      case 3001: return ExceptionsPlatformErrorCodes.clanFireteamAddNoAlternatesForImmediate;
      case 3002: return ExceptionsPlatformErrorCodes.clanFireteamFull;
      case 3003: return ExceptionsPlatformErrorCodes.clanFireteamAltFull;
      case 3004: return ExceptionsPlatformErrorCodes.clanFireteamBlocked;
      case 3005: return ExceptionsPlatformErrorCodes.clanFireteamPlayerEntryNotFound;
      case 3006: return ExceptionsPlatformErrorCodes.clanFireteamPermissions;
      case 3007: return ExceptionsPlatformErrorCodes.clanFireteamInvalidPlatform;
      case 3008: return ExceptionsPlatformErrorCodes.clanFireteamCannotAdjustSlotCount;
      case 3009: return ExceptionsPlatformErrorCodes.clanFireteamInvalidPlayerPlatform;
      case 3010: return ExceptionsPlatformErrorCodes.clanFireteamNotReadyForInvitesNotEnoughPlayers;
      case 3011: return ExceptionsPlatformErrorCodes.clanFireteamGameInvitesNotSupportForPlatform;
      case 3012: return ExceptionsPlatformErrorCodes.clanFireteamPlatformInvitePreqFailure;
      case 3013: return ExceptionsPlatformErrorCodes.clanFireteamInvalidAuthContext;
      case 3014: return ExceptionsPlatformErrorCodes.clanFireteamInvalidAuthProviderPsn;
      case 3015: return ExceptionsPlatformErrorCodes.clanFireteamPs4SessionFull;
      case 3016: return ExceptionsPlatformErrorCodes.clanFireteamInvalidAuthToken;
      case 3017: return ExceptionsPlatformErrorCodes.clanFireteamScheduledFireteamsDisabled;
      case 3018: return ExceptionsPlatformErrorCodes.clanFireteamNotReadyForInvitesNotScheduledYet;
      case 3019: return ExceptionsPlatformErrorCodes.clanFireteamNotReadyForInvitesClosed;
      case 3020: return ExceptionsPlatformErrorCodes.clanFireteamScheduledFireteamsRequireAdminPermissions;
      case 3021: return ExceptionsPlatformErrorCodes.clanFireteamNonPublicMustHaveClan;
      case 3022: return ExceptionsPlatformErrorCodes.clanFireteamPublicCreationRestriction;
      case 3023: return ExceptionsPlatformErrorCodes.clanFireteamAlreadyJoined;
      case 3024: return ExceptionsPlatformErrorCodes.clanFireteamScheduledFireteamsRange;
      case 3025: return ExceptionsPlatformErrorCodes.clanFireteamPublicCreationRestrictionExtended;
      default: throw('Unknown enum value to decode: $data');
    }
  }
}

